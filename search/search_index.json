{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Bem vindo ao meu site! Os t\u00f3picos apresentados s\u00e3o: Como foi feita a constru\u00e7\u00e3o do site? Anota\u00e7\u00f5es do Curso de Linux Anota\u00e7\u00f5es do Curso de Docker","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"#bem-vindo-ao-meu-site","text":"Os t\u00f3picos apresentados s\u00e3o: Como foi feita a constru\u00e7\u00e3o do site? Anota\u00e7\u00f5es do Curso de Linux Anota\u00e7\u00f5es do Curso de Docker","title":"Bem vindo ao meu site!"},{"location":"about/","text":"Sobre o site Aqui vou deixar registrado meus aprendizados e anota\u00e7\u00f5es dos cursos que estou fazendo no decorrer da minha trajet\u00f3ria na Wine! Para acessar meu perfil do GitHub clique -> aqui <- ! Navegue pelos t\u00f3picos e aprenda!","title":"Sobre o site"},{"location":"about/#sobre-o-site","text":"Aqui vou deixar registrado meus aprendizados e anota\u00e7\u00f5es dos cursos que estou fazendo no decorrer da minha trajet\u00f3ria na Wine! Para acessar meu perfil do GitHub clique -> aqui <- ! Navegue pelos t\u00f3picos e aprenda!","title":"Sobre o site"},{"location":"criando-o-site/","text":"1. Instala\u00e7\u00e3o do material for mkdocs ~$ docker pull squidfunk/mkdocs-material 2. Iniciar a documenta\u00e7\u00e3o do projeto ~$ docker run --rm -it -v ${PWD}:/docs squidfunk/mkdocs-material new . ser\u00e1 criada uma pasta docs (com o arquivo index.md ) e um arquivo m kdocs.yml 3. Par ativar o tema, o mkdocs.yml come\u00e7ar\u00e1 assim: theme: name: material 4. Para ver as altera\u00e7\u00f5es em tempo real: ~$ docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material 5. Para hospedar o site no GitHub pages: Primeiro foi necess\u00e1ria a cria\u00e7\u00e3o do GitHub Actions workflow dentro do reposit\u00f3rio: .github/workflows/ci.yml Com a pasta da maneira que est\u00e1 escrita neste site . Depois de dar o push para o github, ativamos no github pages nas configura\u00e7\u00f5es e o site foi criado! Configura\u00e7\u00f5es do site Dentro da pasta mkdocs.yml s\u00e3o feitas todas as altera\u00e7\u00f5es do site: adicionados t\u00f3picos; mudan\u00e7a de cores; etc","title":"Criando o site"},{"location":"criando-o-site/#configuracoes-do-site","text":"Dentro da pasta mkdocs.yml s\u00e3o feitas todas as altera\u00e7\u00f5es do site: adicionados t\u00f3picos; mudan\u00e7a de cores; etc","title":"Configura\u00e7\u00f5es do site"},{"location":"Curso%20de%20Docker/docker-introducao/","text":"Introdu\u00e7\u00e3o O docker \u00e9 um software que permite a virtualiza\u00e7\u00e3o de aplica\u00e7\u00f5es utilizando cont\u00eainers . Nos pr\u00f3ximos t\u00f3picos s\u00e3o aprensentadas algumas anota\u00e7\u00f5es feitas no decorrer do curso!","title":"Introdu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-introducao/#introducao","text":"O docker \u00e9 um software que permite a virtualiza\u00e7\u00e3o de aplica\u00e7\u00f5es utilizando cont\u00eainers . Nos pr\u00f3ximos t\u00f3picos s\u00e3o aprensentadas algumas anota\u00e7\u00f5es feitas no decorrer do curso!","title":"Introdu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-modulo-1/","text":"M\u00f3dulo 1 Aula 2 Por que usamos docker? Torna tudo mais f\u00e1cil para a instala\u00e7\u00e3o e a execu\u00e7\u00e3o de software sem se preocupar com muitas configura\u00e7\u00f5es ou instala\u00e7\u00e3o de depend\u00eancias. Aula 3 O que \u00e9 Docker? \u00c9 uma plataforma ou ecossistema em torno da cria\u00e7\u00e3o/execu\u00e7\u00e3o dos containers. O que \u00e9 cont\u00eainer? \u00c9 um programa com seu pr\u00f3prio conjunto isolado de recursos de hardware.","title":"M\u00f3dulo 1"},{"location":"Curso%20de%20Docker/docker-modulo-1/#modulo-1","text":"","title":"M\u00f3dulo 1"},{"location":"Curso%20de%20Docker/docker-modulo-1/#aula-2","text":"","title":"Aula 2"},{"location":"Curso%20de%20Docker/docker-modulo-1/#por-que-usamos-docker","text":"Torna tudo mais f\u00e1cil para a instala\u00e7\u00e3o e a execu\u00e7\u00e3o de software sem se preocupar com muitas configura\u00e7\u00f5es ou instala\u00e7\u00e3o de depend\u00eancias.","title":"Por que usamos docker?"},{"location":"Curso%20de%20Docker/docker-modulo-1/#aula-3","text":"","title":"Aula 3"},{"location":"Curso%20de%20Docker/docker-modulo-1/#o-que-e-docker","text":"\u00c9 uma plataforma ou ecossistema em torno da cria\u00e7\u00e3o/execu\u00e7\u00e3o dos containers.","title":"O que \u00e9 Docker?"},{"location":"Curso%20de%20Docker/docker-modulo-1/#o-que-e-conteiner","text":"\u00c9 um programa com seu pr\u00f3prio conjunto isolado de recursos de hardware.","title":"O que \u00e9 cont\u00eainer?"},{"location":"Curso%20de%20Docker/docker-modulo-12/","text":"M\u00f3dulo 12 Neste m\u00f3dulo ser\u00e1 iniciado os estudo de Kubernetes. O que \u00e9 Kubernetes? \u00c9 um programa que permite escalar o aplicativo com m\u00e1quinas adicionais exacutando cada um dos cont\u00eainers da aplica\u00e7\u00e3o. Para isso \u00e9 utilizada a clusteiriza\u00e7\u00e3o de aplica\u00e7\u00f5es: 1 ou mais n\u00f3s (m\u00e1quinas virtuais) controlados por um 'master'. Por qu\u00ea usar Kubernetes? Quando vc precisa rodar diferentes cont\u00eainers com diferentes imagens minikube status kubectl cluster-info Gerando uma imagem 'multi-client' (Aula 193 -) 1. A imagem deve estar hospedada no docker hub; (aula 159 - se\u00e7\u00e3o 10) 2. Fazer um arquivo para criar o cont\u00eainer; criar um diret\u00f3rio 'simplek8s' entrar no diret\u00f3rio e abrir o editor de texto (code .) criar uma pasta 'client-pod.yaml' apiVersion: v1 kind: Pod metadata: name: client-pod labels: component: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000 3. Fazer um arquivo para configurar a rede. no mesmo diret\u00f3rio do t\u00f3pico acima criar um arquivo 'client-node-port.yaml' apiVersion: v1 kind: Service metadata: name: client-node-port spec: type: NodePort ports: - port: 3050 targetPort: 3000 nodePort: 31515 selector: component: web ### Pod (aula 197) N\u00e3o podemos implantar cont\u00eainers individuais, Pod \u00e9 o menor coisa que podemos implantar. Um Pod pode ser criado para rodar um \u00fanico cont\u00eainer. ### Service (aula 198) Configura a rede no Kubernetes. - Subtipos: (especificados na pasta em 'type') 1. ClusterIP 2. NodePort 3. LoadBalancer 4. Ingress Acessando um cont\u00eainer em execu\u00e7\u00e3o (aula 199) Criando os objetos ~$ kubectl apply -f 'nome do arquivo' Status do objeto ~$ kubectl get 'tipo de objeto' ex: kubectl get pods Acessando no navegador ~$ minikube ip Utilizar o IP gerado para acessar no navegador","title":"M\u00f3dulo 12"},{"location":"Curso%20de%20Docker/docker-modulo-12/#modulo-12","text":"Neste m\u00f3dulo ser\u00e1 iniciado os estudo de Kubernetes.","title":"M\u00f3dulo 12"},{"location":"Curso%20de%20Docker/docker-modulo-12/#o-que-e-kubernetes","text":"\u00c9 um programa que permite escalar o aplicativo com m\u00e1quinas adicionais exacutando cada um dos cont\u00eainers da aplica\u00e7\u00e3o. Para isso \u00e9 utilizada a clusteiriza\u00e7\u00e3o de aplica\u00e7\u00f5es: 1 ou mais n\u00f3s (m\u00e1quinas virtuais) controlados por um 'master'.","title":"O que \u00e9 Kubernetes?"},{"location":"Curso%20de%20Docker/docker-modulo-12/#por-que-usar-kubernetes","text":"Quando vc precisa rodar diferentes cont\u00eainers com diferentes imagens minikube status kubectl cluster-info","title":"Por qu\u00ea usar Kubernetes?"},{"location":"Curso%20de%20Docker/docker-modulo-12/#gerando-uma-imagem-multi-client","text":"(Aula 193 -) 1. A imagem deve estar hospedada no docker hub; (aula 159 - se\u00e7\u00e3o 10) 2. Fazer um arquivo para criar o cont\u00eainer; criar um diret\u00f3rio 'simplek8s' entrar no diret\u00f3rio e abrir o editor de texto (code .) criar uma pasta 'client-pod.yaml' apiVersion: v1 kind: Pod metadata: name: client-pod labels: component: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000 3. Fazer um arquivo para configurar a rede. no mesmo diret\u00f3rio do t\u00f3pico acima criar um arquivo 'client-node-port.yaml' apiVersion: v1 kind: Service metadata: name: client-node-port spec: type: NodePort ports: - port: 3050 targetPort: 3000 nodePort: 31515 selector: component: web ### Pod (aula 197) N\u00e3o podemos implantar cont\u00eainers individuais, Pod \u00e9 o menor coisa que podemos implantar. Um Pod pode ser criado para rodar um \u00fanico cont\u00eainer. ### Service (aula 198) Configura a rede no Kubernetes. - Subtipos: (especificados na pasta em 'type') 1. ClusterIP 2. NodePort 3. LoadBalancer 4. Ingress","title":"Gerando uma imagem 'multi-client'"},{"location":"Curso%20de%20Docker/docker-modulo-12/#acessando-um-conteiner-em-execucao","text":"(aula 199) Criando os objetos ~$ kubectl apply -f 'nome do arquivo' Status do objeto ~$ kubectl get 'tipo de objeto' ex: kubectl get pods Acessando no navegador ~$ minikube ip Utilizar o IP gerado para acessar no navegador","title":"Acessando um cont\u00eainer em execu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-modulo-13/","text":"M\u00f3dulo 13 Atualizar o 'Pod' gerado para usar imagem 'multi-worker' (aula 202 - 203) OBS: O nome e o tipo n\u00e3o podem mudar ao fazer a atualiza\u00e7\u00e3o do objeto, apenas a imagem. apiVersion: v1 kind: Pod metadata: name: client-pod labels: component: web spec: containers: - name: client image: beatrizafonso/multi-worker ports: - containerPort: 3000 Salvar a imagem, e rodar: ~$ kubectl apply -f client-pod.yaml Para ver o status: ~$ kubectl get pods Infoma\u00e7\u00e3o detalhada de um objeto: ~$ kubectl describe 'object type' 'object name' ex: kubectl describe pods client-pod Limita\u00e7\u00f5es na atualiza\u00e7\u00e3o de objetos (204 - 205) 'containers', 'name' e 'port' n\u00e3o podem ser atualizados! Arquivos de configura\u00e7\u00e3o de deploy (aula 207 e 208) criar um arquivo que fa\u00e7a o deploy que criar\u00e1 um cont\u00eainer utilizando a imagem da porta 3000: Criar uma pasta client-deployment.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: client-deployment spec: replicas: 1 selector: matchLbels: componet: web template: metadata: labels: component: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000 kind: tipo de obejto criado; template: \u00e9 listada a configura\u00e7\u00e3o que ser\u00e1 utilizada para todos os pods deste deploy; replicas: especifica o numero de 'pods' que o deploy deve criar; selector: oferece um identificador para o label Aplicando o Deploy (aula 209 - 210) remover um objeto existente: ~$ kubectl delete -f 'nome do arquivo' 1. > kubectl apply -f 'nome do arquivo' 2. > kubectl get deployments 3. > minikube ip 4. > acessar no navegador com o codigo gerado ~$ kubectl get pods -o wide Escalando e mudando Deploys (Aula 211) Quando modificamos o 'port' na pasta de deploy, o cont\u00eainer antigo \u00e9 deletado e se cria um outro no lugar. Quando modificamos 'replicas', depois de realizar o deploy \u00e9 poss\u00edcel ver novos pods em execu\u00e7\u00e3o. Quando modificamos 'image' ao rodar o comando get deployments, podemos ver as mudan\u00e7as feitas no processo. Atualizando a imagem do deploy (aula 212 - 214) 1. fazer algumas modifica\u00e7\u00f5es no arquivo de deploy; salvar o arquivo e fazer o 'apply'; rodar minikube ip e copiar o c\u00f3digo para acessar no navegador; 2. Reconstruindo a imagem: entrar no editor de texto da pasta 'client' > src > app.js fazer alguma modifica\u00e7\u00e3o, ex: no titulo. Salvar a imagem e fazer o push para o docker hub: ~$ docker build -t beatrizafonso/multi-client . ~$ docker push beatrizafonso/multi-client 3. Fazer o deploy recriar/atualizar os Pods com a ultima versao da imagem: se rodarmos o comando Kubectl apply -f client-deployment.yaml nos retorna uma resposta que a pasta n\u00e3o foi mudada; 3 solu\u00e7\u00f5es para esse porblema: excluir manualmente cada Pod, e assim ser\u00e1 recriado automaticamente com a ultima vers\u00e7ao da imagem. CUITADO! um desses Pods pode ser o que atenda o tr\u00e1fico da web, e assim por um momento o usu\u00e1rio n\u00e3o conseguir\u00e1 acessar o app. Colocar um tag em 'image' ex: 'beatrizafonso/multi-client:v1','beatrizafonso/multi-clientv2', etc Ap\u00f3s isso, salvar a pasta e fazer o apply. A desvantagem \u00e9 que adiciona uma etapa extra no processo. Usar um comando imperativo, para atualizar a vers\u00e3o: ~$ kubectl client-deploy update_version v1 Melhor solu\u00e7\u00e3o! Atualizando a vers\u00e3o da imagem (aula 215 - utilizando a terceira op\u00e7\u00e3o) Entrar na pasta client pelo terminal e rodar: ~$ docker build -t beatrizfonso/multi-client:v5 ~$ docker push beatrizafonos/multi-client:v5 Depois de reconstruir e fazer o update explicado acima voltar a pasta 'simplek8s' ~$ kubectl set image 'object_type'/'object_name' 'container_name'='new image' ex: kubectl set image deployment/client-deployment client=beatrizafonso/multi-client:v5 set: atualizar uma propriedade em um dos nossos obejtos image: especifica\u00e7\u00e3o do que queremos atualizar, neste caso \u00e9 a 'image' para acessar basta rodar: minikube ip , copiar o c\u00f3digo e pesquisar no navegador 'codigo':'nodePort' (ex: 192.168.99.100:31515) > pode demorar um pouco Reconfigurar o Docker CLI para se comunicar com o docker server: ~$ eval $(minikube docker-env) S\u00f3 vai reconfigurar momentaneamente no terminal","title":"M\u00f3dulo 13"},{"location":"Curso%20de%20Docker/docker-modulo-13/#modulo-13","text":"","title":"M\u00f3dulo 13"},{"location":"Curso%20de%20Docker/docker-modulo-13/#atualizar-o-pod-gerado-para-usar-imagem-multi-worker","text":"(aula 202 - 203) OBS: O nome e o tipo n\u00e3o podem mudar ao fazer a atualiza\u00e7\u00e3o do objeto, apenas a imagem. apiVersion: v1 kind: Pod metadata: name: client-pod labels: component: web spec: containers: - name: client image: beatrizafonso/multi-worker ports: - containerPort: 3000 Salvar a imagem, e rodar: ~$ kubectl apply -f client-pod.yaml Para ver o status: ~$ kubectl get pods","title":"Atualizar o 'Pod' gerado para usar imagem 'multi-worker'"},{"location":"Curso%20de%20Docker/docker-modulo-13/#infomacao-detalhada-de-um-objeto","text":"~$ kubectl describe 'object type' 'object name' ex: kubectl describe pods client-pod","title":"Infoma\u00e7\u00e3o detalhada de um objeto:"},{"location":"Curso%20de%20Docker/docker-modulo-13/#limitacoes-na-atualizacao-de-objetos","text":"(204 - 205) 'containers', 'name' e 'port' n\u00e3o podem ser atualizados!","title":"Limita\u00e7\u00f5es na atualiza\u00e7\u00e3o de objetos"},{"location":"Curso%20de%20Docker/docker-modulo-13/#arquivos-de-configuracao-de-deploy","text":"(aula 207 e 208) criar um arquivo que fa\u00e7a o deploy que criar\u00e1 um cont\u00eainer utilizando a imagem da porta 3000: Criar uma pasta client-deployment.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: client-deployment spec: replicas: 1 selector: matchLbels: componet: web template: metadata: labels: component: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000 kind: tipo de obejto criado; template: \u00e9 listada a configura\u00e7\u00e3o que ser\u00e1 utilizada para todos os pods deste deploy; replicas: especifica o numero de 'pods' que o deploy deve criar; selector: oferece um identificador para o label","title":"Arquivos de configura\u00e7\u00e3o de deploy"},{"location":"Curso%20de%20Docker/docker-modulo-13/#aplicando-o-deploy","text":"(aula 209 - 210)","title":"Aplicando o Deploy"},{"location":"Curso%20de%20Docker/docker-modulo-13/#remover-um-objeto-existente","text":"~$ kubectl delete -f 'nome do arquivo' 1. > kubectl apply -f 'nome do arquivo' 2. > kubectl get deployments 3. > minikube ip 4. > acessar no navegador com o codigo gerado ~$ kubectl get pods -o wide","title":"remover um objeto existente:"},{"location":"Curso%20de%20Docker/docker-modulo-13/#escalando-e-mudando-deploys","text":"(Aula 211) Quando modificamos o 'port' na pasta de deploy, o cont\u00eainer antigo \u00e9 deletado e se cria um outro no lugar. Quando modificamos 'replicas', depois de realizar o deploy \u00e9 poss\u00edcel ver novos pods em execu\u00e7\u00e3o. Quando modificamos 'image' ao rodar o comando get deployments, podemos ver as mudan\u00e7as feitas no processo.","title":"Escalando e mudando Deploys"},{"location":"Curso%20de%20Docker/docker-modulo-13/#atualizando-a-imagem-do-deploy","text":"(aula 212 - 214) 1. fazer algumas modifica\u00e7\u00f5es no arquivo de deploy; salvar o arquivo e fazer o 'apply'; rodar minikube ip e copiar o c\u00f3digo para acessar no navegador; 2. Reconstruindo a imagem: entrar no editor de texto da pasta 'client' > src > app.js fazer alguma modifica\u00e7\u00e3o, ex: no titulo. Salvar a imagem e fazer o push para o docker hub: ~$ docker build -t beatrizafonso/multi-client . ~$ docker push beatrizafonso/multi-client 3. Fazer o deploy recriar/atualizar os Pods com a ultima versao da imagem: se rodarmos o comando Kubectl apply -f client-deployment.yaml nos retorna uma resposta que a pasta n\u00e3o foi mudada; 3 solu\u00e7\u00f5es para esse porblema: excluir manualmente cada Pod, e assim ser\u00e1 recriado automaticamente com a ultima vers\u00e7ao da imagem. CUITADO! um desses Pods pode ser o que atenda o tr\u00e1fico da web, e assim por um momento o usu\u00e1rio n\u00e3o conseguir\u00e1 acessar o app. Colocar um tag em 'image' ex: 'beatrizafonso/multi-client:v1','beatrizafonso/multi-clientv2', etc Ap\u00f3s isso, salvar a pasta e fazer o apply. A desvantagem \u00e9 que adiciona uma etapa extra no processo. Usar um comando imperativo, para atualizar a vers\u00e3o: ~$ kubectl client-deploy update_version v1 Melhor solu\u00e7\u00e3o!","title":"Atualizando a imagem do deploy"},{"location":"Curso%20de%20Docker/docker-modulo-13/#atualizando-a-versao-da-imagem","text":"(aula 215 - utilizando a terceira op\u00e7\u00e3o) Entrar na pasta client pelo terminal e rodar: ~$ docker build -t beatrizfonso/multi-client:v5 ~$ docker push beatrizafonos/multi-client:v5 Depois de reconstruir e fazer o update explicado acima voltar a pasta 'simplek8s' ~$ kubectl set image 'object_type'/'object_name' 'container_name'='new image' ex: kubectl set image deployment/client-deployment client=beatrizafonso/multi-client:v5 set: atualizar uma propriedade em um dos nossos obejtos image: especifica\u00e7\u00e3o do que queremos atualizar, neste caso \u00e9 a 'image' para acessar basta rodar: minikube ip , copiar o c\u00f3digo e pesquisar no navegador 'codigo':'nodePort' (ex: 192.168.99.100:31515) > pode demorar um pouco Reconfigurar o Docker CLI para se comunicar com o docker server: ~$ eval $(minikube docker-env) S\u00f3 vai reconfigurar momentaneamente no terminal","title":"Atualizando a vers\u00e3o da imagem"},{"location":"Curso%20de%20Docker/docker-modulo-14/","text":"M\u00f3dulo 14 Cria\u00e7\u00e3o de um app multi-containers com o Kubernetes Caminho Criar os arquivos de configura\u00e7\u00e3o e de deploy; Testar localmente no minikube; Criar um repo no githhub > Travis CI para construir as imagens e fazer o deploy; Fazer o deploy para o provedor de nuvem. Depois de entrar na pasta do projeto, para checar se est\u00e1 tudo funcionando: ~$ docker-compose up --build ~$ docker-compose up A partir da\u00ed \u00e9 possivel acessar no navegador: localhost:3050 obs: antes de come\u00e7ar as modifica\u00e7\u00f5es \u00e9 bom fazer uma c\u00f3pia da pasta para que sirva como backup Limpar alguns arquivos criados anteriormente que n\u00e3o s\u00e3o mais necess\u00e1rios: travis.yml ; docker-compose.yml ; dockerrun.aws.jason . ; pasta NginX . Criar um nova pasta k8s ; dentro dela criar 1 arquivo para cada objeto que estar\u00e1 dentro do n\u00f3: exemplo de arquivo de deploy .yaml apiVersion: apps/v1 kind: Deployment metadata: name: client-deployment spec: replicas: 3 selector: matchLabels: component: web template: metabase: label: componet: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000 Tipos de objetos: (aula 224) - Pods: Roda 1 ou mais contaners associados; - Services: configura a rede no kebernetes; - ClusterIP: exp\u00f5e um conjunto de Pods a outros objetos no cluster; - NodePort: Exp\u00f5e um conjunto de Pods para o mundo externo. Exemplo de arquivo de ClusterIP .yaml (aula 225) Criando um arquivo de configur\u00e7\u00e3o do tipo ClusterIP > dentro da pasta k8s client-cluster-ip-service.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: client-cluster-ip-service spec: type: ClusterIP selector: component: web ports: - port: 3000 targetPort: 3000 selector: especifica o seletor que o deploy usar\u00e1 para encontrar de pods que vai controlar. obs: quando o arquivo n\u00e3o precisar ser associado a nenhum outro arquivo, n\u00e3o \u00e9 necesss\u00e1rio especificar a porta Checar se o arquivo criado est\u00e1 funcionando (aula 226) deletar todos os deployments : ~$ kubectl get deployments ~$ kubectl delete 'tipo de objeto' 'nome' deletar todos os servi\u00e7os: ~$ kubectl get services deixar apenas o tipo clusterIP: ~$ kubectl delete 'tipo' 'nome' ~$ kubectl apply -f 'nome da pasta' Para ver se os arquivos est\u00e3o rodando normalmente: ~$ kubectl get pods ~$ kubectl get deployments ~$ kubectl get services ~$ kubectl logs 'nome' (aparece quando rodamos kubectl get pods) Combinar arquivos em 1 \u00fanico arquivo \u00e9 poss\u00edvel combinar os arquivos de deploy e de clusterID em um unico arquivo basta separ\u00e1-los com '---' como feito abaixo > server-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: server-deployment spec: replicas: 3 selector: matchLabels: component: server template: metabase: labels: componet: server spec: containers: - name: server image: beatrizafonso/multi-server ports: - containerPort: 5000 --- apiVersion: apps/v1 kind: Service metadata: name: server-cluster-ip-service spec: type: ClusterIP selector: component: server ports: - port: 5000 targetPort: 5000 Repply dos arquivos ~$ kubectl apply -f 'nome da pasta' Para ver se os arquivos est\u00e3o rodando normalmente: ~$ kubectl get pods ~$ kubectl get deployments ~$ kubectl get services ~$ kubectl logs 'nome' (aparece quando rodamos kubectl get pods) PVC (Persistent Volume Claim) \u00c9 importante ter esses volumes com bancos de dados para que n\u00e3o haja perda de dados, caso o Pod ou Cont\u00eainer travar. obs: Se voc\u00ea quiser aumentar o n\u00famero de replicas, \u00e9 preciso adicionar algumas configura\u00e7\u00f5es adicionais,e n\u00e3o apenas modificar o numero no arquivo. Volume em Kubernetes \u00c9 um objeto que permite o cont\u00eainer armazenar dados, podemos criar um arquivo de configura\u00e7\u00e3o para ele. Persistent Volume Um objeto aonde criamos algum tipo de armazenamento dur\u00e1vel que n\u00e3o \u00e9 vinculado a nenhum Pod ou cont\u00eainer. Assim se algo travar, os dados estar\u00e3o seguros e ser\u00e1 recriado o cont\u00eainer ou Pod. Persistent Volume Claim (238 - 241) Nada \u00e9 armazenado no PVC, ele apenas tem informa\u00e7\u00f5es dos dados dispon\u00edveis que voc\u00ea pode solicitar dentro do arquivo de configura\u00e7\u00e3o do Pod. Assim, o Kubernetes ir\u00e1 'procurar' nos Persistent Volumes existentes ou tentar\u00e1 cri\u00e1-lo em tempo real. arquivo PVC dentro de k8s: database-persistent-volume-claim.yaml : apiVersion: v1 kind: PersistentVolumeClaim metadata: name: database-persistent-volume-claim spec: acessModes: - ReadWriteOnce resources: requests: storage: 2Gi acessModes: ReadWriteOnde: L\u00ea e grava as infos no volume e pode ser usada por um \u00fanico n\u00f3 de cada vez; ReadOnlyMany: Apenas l\u00ea a informa\u00e7\u00e3o e pode ser usado pozr m\u00faltiploa n\u00f3s; ReadWriteMany: L\u00ea e grava a info e pode ser usado por m\u00fa\u00e7tiplos n\u00f3s. Storage: fala o espa\u00e7o que as infos recebidas tem que ter. Designando o PVC a um arquivo (aula 242) Pegaremos um arquivo de deploy que exemplificamos anteriormente para adicionar a aba 'volumes': postgres-deployment.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: postgres-deployment spec: replicas: 1 selector: matchLabels: component: postgres template: metabase: label: componet: postgres spec: volumes: - name: postgres-storage persistentVolumeClaim claimName: database-persistent-volume-claim containers: - name: postgres image: postgres ports: - containerPort: 5432 volumeMounts: - name: postgres-storage mountPath: /var/lib/postgresql/data subPath: postgres Apply do PVC ~$ kubectl apply -f 'nome da pasta' ~$ kubectl get pods ~$ kubectl get pv (persistent volume) ~$ kubectl get pvc (persistent volume claim) Enviroment Variables adicionando em um arquivo de exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: worker-deployment spec: replicas: 1 selector: matchLabels: component: worker template: metabase: labels: componet: worker spec: containers: - name: worker image: beatrizafonso/multi-worker env: - name: REDIS_HOST value: redis-cluster-ip-service - name: REDIS_PORT value: '6379' Outro Exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: server-deployment spec: replicas: 3 selector: matchLabels: component: server template: metabase: labels: componet: server spec: containers: - name: server image: beatrizafonso/multi-server ports: - containerPort: 5000 env: - name: REDIS_HOST value: redis-cluster-ip-service - name: REDIS_PORT value: '6379' - name: PGUSER value: postgres -name: PGHOST value: postgres-cluster-ip-service - name: PGPORT value: '5432' - name: PGDATABASE value: postgres PGPASSWORD (aula 246 - 248) Para armazenar com seguran\u00e7a algumas infos vamos utilizar um novo tipo de objeto: Secrets . ~$ kubectl create secret generic 'nome do segredo' --from-literal 'nome do segredo'='senha' (kubectl - comando imperativo - tipo de objeto - tipo de segredo - nome do segredo - escrever infos no comando - colocar senha) Para verificar se foi criado: ~$ kubectl get secrets Conectar o Secret com a pasta de deployment: no final da pasta criada acima, dentro de env: - name: 'nome do segredo' valueFrom: secretKeyRef: name: 'nome do segredo' key: 'nome do segredo' na outra pasta de deployment: env: - name: 'nome do segredo' valueFrom: secretKeyRef: name: 'nome do segredo' key: 'nome do segredo' Ap\u00f3s isso, aplicar as mudan\u00e7as!","title":"M\u00f3dulo 14"},{"location":"Curso%20de%20Docker/docker-modulo-14/#modulo-14","text":"","title":"M\u00f3dulo 14"},{"location":"Curso%20de%20Docker/docker-modulo-14/#criacao-de-um-app-multi-containers-com-o-kubernetes","text":"","title":"Cria\u00e7\u00e3o de um app multi-containers com o Kubernetes"},{"location":"Curso%20de%20Docker/docker-modulo-14/#caminho","text":"Criar os arquivos de configura\u00e7\u00e3o e de deploy; Testar localmente no minikube; Criar um repo no githhub > Travis CI para construir as imagens e fazer o deploy; Fazer o deploy para o provedor de nuvem. Depois de entrar na pasta do projeto, para checar se est\u00e1 tudo funcionando: ~$ docker-compose up --build ~$ docker-compose up A partir da\u00ed \u00e9 possivel acessar no navegador: localhost:3050 obs: antes de come\u00e7ar as modifica\u00e7\u00f5es \u00e9 bom fazer uma c\u00f3pia da pasta para que sirva como backup Limpar alguns arquivos criados anteriormente que n\u00e3o s\u00e3o mais necess\u00e1rios: travis.yml ; docker-compose.yml ; dockerrun.aws.jason . ; pasta NginX . Criar um nova pasta k8s ; dentro dela criar 1 arquivo para cada objeto que estar\u00e1 dentro do n\u00f3:","title":"Caminho"},{"location":"Curso%20de%20Docker/docker-modulo-14/#exemplo-de-arquivo-de-deploy-yaml","text":"apiVersion: apps/v1 kind: Deployment metadata: name: client-deployment spec: replicas: 3 selector: matchLabels: component: web template: metabase: label: componet: web spec: containers: - name: client image: beatrizafonso/multi-client ports: - containerPort: 3000","title":"exemplo de arquivo de deploy .yaml"},{"location":"Curso%20de%20Docker/docker-modulo-14/#tipos-de-objetos","text":"(aula 224) - Pods: Roda 1 ou mais contaners associados; - Services: configura a rede no kebernetes; - ClusterIP: exp\u00f5e um conjunto de Pods a outros objetos no cluster; - NodePort: Exp\u00f5e um conjunto de Pods para o mundo externo.","title":"Tipos de objetos:"},{"location":"Curso%20de%20Docker/docker-modulo-14/#exemplo-de-arquivo-de-clusterip-yaml","text":"(aula 225) Criando um arquivo de configur\u00e7\u00e3o do tipo ClusterIP > dentro da pasta k8s client-cluster-ip-service.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: client-cluster-ip-service spec: type: ClusterIP selector: component: web ports: - port: 3000 targetPort: 3000 selector: especifica o seletor que o deploy usar\u00e1 para encontrar de pods que vai controlar. obs: quando o arquivo n\u00e3o precisar ser associado a nenhum outro arquivo, n\u00e3o \u00e9 necesss\u00e1rio especificar a porta","title":"Exemplo de arquivo de ClusterIP .yaml"},{"location":"Curso%20de%20Docker/docker-modulo-14/#checar-se-o-arquivo-criado-esta-funcionando","text":"(aula 226) deletar todos os deployments : ~$ kubectl get deployments ~$ kubectl delete 'tipo de objeto' 'nome' deletar todos os servi\u00e7os: ~$ kubectl get services deixar apenas o tipo clusterIP: ~$ kubectl delete 'tipo' 'nome' ~$ kubectl apply -f 'nome da pasta' Para ver se os arquivos est\u00e3o rodando normalmente: ~$ kubectl get pods ~$ kubectl get deployments ~$ kubectl get services ~$ kubectl logs 'nome' (aparece quando rodamos kubectl get pods)","title":"Checar se o arquivo criado est\u00e1 funcionando"},{"location":"Curso%20de%20Docker/docker-modulo-14/#combinar-arquivos-em-1-unico-arquivo","text":"\u00e9 poss\u00edvel combinar os arquivos de deploy e de clusterID em um unico arquivo basta separ\u00e1-los com '---' como feito abaixo > server-deployment.yaml apiVersion: apps/v1 kind: Deployment metadata: name: server-deployment spec: replicas: 3 selector: matchLabels: component: server template: metabase: labels: componet: server spec: containers: - name: server image: beatrizafonso/multi-server ports: - containerPort: 5000 --- apiVersion: apps/v1 kind: Service metadata: name: server-cluster-ip-service spec: type: ClusterIP selector: component: server ports: - port: 5000 targetPort: 5000","title":"Combinar arquivos em 1 \u00fanico arquivo"},{"location":"Curso%20de%20Docker/docker-modulo-14/#repply-dos-arquivos","text":"~$ kubectl apply -f 'nome da pasta' Para ver se os arquivos est\u00e3o rodando normalmente: ~$ kubectl get pods ~$ kubectl get deployments ~$ kubectl get services ~$ kubectl logs 'nome' (aparece quando rodamos kubectl get pods)","title":"Repply dos arquivos"},{"location":"Curso%20de%20Docker/docker-modulo-14/#pvc-persistent-volume-claim","text":"\u00c9 importante ter esses volumes com bancos de dados para que n\u00e3o haja perda de dados, caso o Pod ou Cont\u00eainer travar. obs: Se voc\u00ea quiser aumentar o n\u00famero de replicas, \u00e9 preciso adicionar algumas configura\u00e7\u00f5es adicionais,e n\u00e3o apenas modificar o numero no arquivo.","title":"PVC (Persistent Volume Claim)"},{"location":"Curso%20de%20Docker/docker-modulo-14/#volume-em-kubernetes","text":"\u00c9 um objeto que permite o cont\u00eainer armazenar dados, podemos criar um arquivo de configura\u00e7\u00e3o para ele.","title":"Volume em Kubernetes"},{"location":"Curso%20de%20Docker/docker-modulo-14/#persistent-volume","text":"Um objeto aonde criamos algum tipo de armazenamento dur\u00e1vel que n\u00e3o \u00e9 vinculado a nenhum Pod ou cont\u00eainer. Assim se algo travar, os dados estar\u00e3o seguros e ser\u00e1 recriado o cont\u00eainer ou Pod.","title":"Persistent Volume"},{"location":"Curso%20de%20Docker/docker-modulo-14/#persistent-volume-claim","text":"(238 - 241) Nada \u00e9 armazenado no PVC, ele apenas tem informa\u00e7\u00f5es dos dados dispon\u00edveis que voc\u00ea pode solicitar dentro do arquivo de configura\u00e7\u00e3o do Pod. Assim, o Kubernetes ir\u00e1 'procurar' nos Persistent Volumes existentes ou tentar\u00e1 cri\u00e1-lo em tempo real. arquivo PVC dentro de k8s: database-persistent-volume-claim.yaml : apiVersion: v1 kind: PersistentVolumeClaim metadata: name: database-persistent-volume-claim spec: acessModes: - ReadWriteOnce resources: requests: storage: 2Gi acessModes: ReadWriteOnde: L\u00ea e grava as infos no volume e pode ser usada por um \u00fanico n\u00f3 de cada vez; ReadOnlyMany: Apenas l\u00ea a informa\u00e7\u00e3o e pode ser usado pozr m\u00faltiploa n\u00f3s; ReadWriteMany: L\u00ea e grava a info e pode ser usado por m\u00fa\u00e7tiplos n\u00f3s. Storage: fala o espa\u00e7o que as infos recebidas tem que ter.","title":"Persistent Volume Claim"},{"location":"Curso%20de%20Docker/docker-modulo-14/#designando-o-pvc-a-um-arquivo","text":"(aula 242) Pegaremos um arquivo de deploy que exemplificamos anteriormente para adicionar a aba 'volumes': postgres-deployment.yaml : apiVersion: apps/v1 kind: Deployment metadata: name: postgres-deployment spec: replicas: 1 selector: matchLabels: component: postgres template: metabase: label: componet: postgres spec: volumes: - name: postgres-storage persistentVolumeClaim claimName: database-persistent-volume-claim containers: - name: postgres image: postgres ports: - containerPort: 5432 volumeMounts: - name: postgres-storage mountPath: /var/lib/postgresql/data subPath: postgres","title":"Designando o PVC a um arquivo"},{"location":"Curso%20de%20Docker/docker-modulo-14/#apply-do-pvc","text":"~$ kubectl apply -f 'nome da pasta' ~$ kubectl get pods ~$ kubectl get pv (persistent volume) ~$ kubectl get pvc (persistent volume claim)","title":"Apply do PVC"},{"location":"Curso%20de%20Docker/docker-modulo-14/#enviroment-variables","text":"adicionando em um arquivo de exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: worker-deployment spec: replicas: 1 selector: matchLabels: component: worker template: metabase: labels: componet: worker spec: containers: - name: worker image: beatrizafonso/multi-worker env: - name: REDIS_HOST value: redis-cluster-ip-service - name: REDIS_PORT value: '6379' Outro Exemplo: apiVersion: apps/v1 kind: Deployment metadata: name: server-deployment spec: replicas: 3 selector: matchLabels: component: server template: metabase: labels: componet: server spec: containers: - name: server image: beatrizafonso/multi-server ports: - containerPort: 5000 env: - name: REDIS_HOST value: redis-cluster-ip-service - name: REDIS_PORT value: '6379' - name: PGUSER value: postgres -name: PGHOST value: postgres-cluster-ip-service - name: PGPORT value: '5432' - name: PGDATABASE value: postgres","title":"Enviroment Variables"},{"location":"Curso%20de%20Docker/docker-modulo-14/#pgpassword","text":"(aula 246 - 248) Para armazenar com seguran\u00e7a algumas infos vamos utilizar um novo tipo de objeto: Secrets . ~$ kubectl create secret generic 'nome do segredo' --from-literal 'nome do segredo'='senha' (kubectl - comando imperativo - tipo de objeto - tipo de segredo - nome do segredo - escrever infos no comando - colocar senha) Para verificar se foi criado: ~$ kubectl get secrets Conectar o Secret com a pasta de deployment: no final da pasta criada acima, dentro de env: - name: 'nome do segredo' valueFrom: secretKeyRef: name: 'nome do segredo' key: 'nome do segredo' na outra pasta de deployment: env: - name: 'nome do segredo' valueFrom: secretKeyRef: name: 'nome do segredo' key: 'nome do segredo' Ap\u00f3s isso, aplicar as mudan\u00e7as!","title":"PGPASSWORD"},{"location":"Curso%20de%20Docker/docker-modulo-2/","text":"M\u00f3dulo 2 Aula 14 Criar e executar um cont\u00eainer usando uma imagem ~$ docker run 'image name' - exemplo: docker run hello-world Aula 15 Executar um comando dentro do cont\u00eainer (qualquer comando padr\u00e3o inclu\u00eddo na imagem n\u00e3o ser\u00e1 executado) ~$ docker run 'image name' command! exemplo: docker run busybox echo hi there ls : ir\u00e1 aparecer todos os arquivos e diret\u00f3rios dentro de um determinado diret\u00f3rio exemplo: docker run busybox ls Ir\u00e1 aparecer diret\u00f3rios que estar\u00e3o dentro do seu cont\u00eainer Aula 16 Listar todos os diferentes cont\u00eainers em execu\u00e7\u00e3o ~$ docker ps Listar todos os cont\u00eainers que j\u00e1 foram executados na sua m\u00e1quina ~$ docker ps --all Aula 17 O que acontece quando um cont\u00eainer \u00e9 criado? docker run = docker create + docker start docker run mostrar\u00e1 todos os logs ou todas as infos que saem do cont\u00eainer docker create cria e imprime o ID do cont\u00eainer: ~$ docker create 'image name' ~$ docker start -a 'container id' -a : far\u00e1 com que o docker observe a sa\u00edda do cont\u1ebdiner e imprima no terminal Aula 19 Remover todos os cont\u00eainers ~$ docker system prune Aula 20 Examinar o cont\u00eainer ~$ docker logs 'container id' logs: utilizado para examinar um cont\u00eainer e recuperar todas as informa\u00e7\u00f5es que foram emitidas a partir dele Aula 21 Parar um cont\u00eainer que est\u00e1 sendo executado ~$ docker stop 'container id' stop : d\u00e1 um tempo para o cont\u00eainer encerrar e fazer uma limpeza (ideal) ~$ docker kill 'container id' kill : encerra imediatamente o cont\u00eainer sem fazer nenhum trabalho adicional (utilizar quando o 'stop' n\u00e3o funcionar) Aula 23 Comandos dentro de um cont\u00eainer em execu\u00e7\u00e3o ~$ docker exec -it 'container id' 'command' exec : executar um comando adicional dentro de um cont\u00eainer -it = -i + -t : permite digitar a entrada diretamente no cont\u00eainer Aula 24 Flag -i e -t -i : garante que qualquer coisa quer voc\u1ebd digite seja direcionado ao comando digitado -t : garante que o comando apare\u00e7a bem formatado Aula 25 Prompt de comando dentro de um cont\u00eainer (para n\u00e3o precisar digitar 'docker exec' seguidamente) Depois que o cont\u00eainer estiver rodando abrir um segundo terminal e colocar: ~$ docker exec -it 'container id' sh sh : \u00e9 um programa que nos permite digitar comando e execut\u00e1-los dentro de uma cont\u00eainer Para sair do prompt de comando: 'ctrl + D' ou 'exit' Aula 26 Executar e abrir o prompt de comando dentro de um cont\u00eainer ~$ docker run -it 'image name' sh Aula 27 Tomar cuidado ao abrir o prompt de comando de um cant\u00eainer espec\u00edfico em dois terminais, as mudan\u00e7as que ser\u00e3o feitas em um n\u00e3o parecer\u00e1 no outro.","title":"M\u00f3dulo 2"},{"location":"Curso%20de%20Docker/docker-modulo-2/#modulo-2","text":"","title":"M\u00f3dulo 2"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-14","text":"","title":"Aula 14"},{"location":"Curso%20de%20Docker/docker-modulo-2/#criar-e-executar-um-conteiner-usando-uma-imagem","text":"~$ docker run 'image name' - exemplo: docker run hello-world","title":"Criar e executar um cont\u00eainer usando uma imagem"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-15","text":"","title":"Aula 15"},{"location":"Curso%20de%20Docker/docker-modulo-2/#executar-um-comando-dentro-do-conteiner","text":"(qualquer comando padr\u00e3o inclu\u00eddo na imagem n\u00e3o ser\u00e1 executado) ~$ docker run 'image name' command! exemplo: docker run busybox echo hi there ls : ir\u00e1 aparecer todos os arquivos e diret\u00f3rios dentro de um determinado diret\u00f3rio exemplo: docker run busybox ls Ir\u00e1 aparecer diret\u00f3rios que estar\u00e3o dentro do seu cont\u00eainer","title":"Executar um comando dentro do cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-16","text":"","title":"Aula 16"},{"location":"Curso%20de%20Docker/docker-modulo-2/#listar-todos-os-diferentes-conteiners-em-execucao","text":"~$ docker ps","title":"Listar todos os diferentes cont\u00eainers em execu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-modulo-2/#listar-todos-os-conteiners-que-ja-foram-executados-na-sua-maquina","text":"~$ docker ps --all","title":"Listar todos os cont\u00eainers que j\u00e1 foram executados na sua m\u00e1quina"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-17","text":"","title":"Aula 17"},{"location":"Curso%20de%20Docker/docker-modulo-2/#o-que-acontece-quando-um-conteiner-e-criado","text":"docker run = docker create + docker start docker run mostrar\u00e1 todos os logs ou todas as infos que saem do cont\u00eainer docker create cria e imprime o ID do cont\u00eainer: ~$ docker create 'image name' ~$ docker start -a 'container id' -a : far\u00e1 com que o docker observe a sa\u00edda do cont\u1ebdiner e imprima no terminal","title":"O que acontece quando um cont\u00eainer \u00e9 criado?"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-19","text":"","title":"Aula 19"},{"location":"Curso%20de%20Docker/docker-modulo-2/#remover-todos-os-conteiners","text":"~$ docker system prune","title":"Remover todos os cont\u00eainers"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-20","text":"","title":"Aula 20"},{"location":"Curso%20de%20Docker/docker-modulo-2/#examinar-o-conteiner","text":"~$ docker logs 'container id' logs: utilizado para examinar um cont\u00eainer e recuperar todas as informa\u00e7\u00f5es que foram emitidas a partir dele","title":"Examinar o cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-21","text":"","title":"Aula 21"},{"location":"Curso%20de%20Docker/docker-modulo-2/#parar-um-conteiner-que-esta-sendo-executado","text":"~$ docker stop 'container id' stop : d\u00e1 um tempo para o cont\u00eainer encerrar e fazer uma limpeza (ideal) ~$ docker kill 'container id' kill : encerra imediatamente o cont\u00eainer sem fazer nenhum trabalho adicional (utilizar quando o 'stop' n\u00e3o funcionar)","title":"Parar um cont\u00eainer que est\u00e1 sendo executado"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-23","text":"","title":"Aula 23"},{"location":"Curso%20de%20Docker/docker-modulo-2/#comandos-dentro-de-um-conteiner-em-execucao","text":"~$ docker exec -it 'container id' 'command' exec : executar um comando adicional dentro de um cont\u00eainer -it = -i + -t : permite digitar a entrada diretamente no cont\u00eainer","title":"Comandos dentro de um cont\u00eainer em execu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-24","text":"","title":"Aula 24"},{"location":"Curso%20de%20Docker/docker-modulo-2/#flag-i-e-t","text":"-i : garante que qualquer coisa quer voc\u1ebd digite seja direcionado ao comando digitado -t : garante que o comando apare\u00e7a bem formatado","title":"Flag -i e -t"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-25","text":"","title":"Aula 25"},{"location":"Curso%20de%20Docker/docker-modulo-2/#prompt-de-comando-dentro-de-um-conteiner","text":"(para n\u00e3o precisar digitar 'docker exec' seguidamente) Depois que o cont\u00eainer estiver rodando abrir um segundo terminal e colocar: ~$ docker exec -it 'container id' sh sh : \u00e9 um programa que nos permite digitar comando e execut\u00e1-los dentro de uma cont\u00eainer Para sair do prompt de comando: 'ctrl + D' ou 'exit'","title":"Prompt de comando dentro de um cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-26","text":"Executar e abrir o prompt de comando dentro de um cont\u00eainer ~$ docker run -it 'image name' sh","title":"Aula 26"},{"location":"Curso%20de%20Docker/docker-modulo-2/#aula-27","text":"Tomar cuidado ao abrir o prompt de comando de um cant\u00eainer espec\u00edfico em dois terminais, as mudan\u00e7as que ser\u00e3o feitas em um n\u00e3o parecer\u00e1 no outro.","title":"Aula 27"},{"location":"Curso%20de%20Docker/docker-modulo-3/","text":"M\u00f3dulo 3 Aula 30 Criando imagens no docker 1. criar um diret\u00f3rio: ~$ mkdir 'nome do diretorio' 2. mudar para o diret\u00f3rio criado ~$ cd 'nome do diret\u00f3rio' 3. iniciar o editor de c\u00f3digo dentro dessa pasta ~$ code . 4. criar uma pasta (Dockerfile) sem extens\u00e3o no seu editor de texto e come\u00e7ar a criar a imagem Dentro da pasta: 1. Usar uma imagem existente como base (utilizar uma imagem de acordo com as suas nessecidades, 'alpine' tem as configura\u00e7\u00f5es desejadas para o que queremos executar) FROM 'nome da imagem' (from alpine) 2. baixar e instalar uma dependencia (rodar um comando que existe dentro da imagem) RUN apk add --update redis 3. falar \u00e0 imagem o que fazer quando inicializar o cont\u00eainer CMD [\"redis-server\"] 4. salvar o arquivo e ir para o terminal ~$ docker build . ~$ docker run 'id criado' _obs: se precisar apagar a imagem que foi criada rodar ~$ docker system prune _ Aula 33 usamos o build para obter um arquivo do docker e gerar uma imagem a partir dele; o . est\u00e1 especificando o que deve ser construido Aula 35 Reconstruindo a imagem Ao reconstruir uma imagem (caso tenha colocado um comando adicional) tentar colocar sempre em ordem, para que n\u00e3o tenha que instalar tudo de novo. Aula 36 Imagem com tag Para colocar uma tag em uma imagem e n\u00e3o precisar colocar o ID sempre que quiser rodar ela: ~$ Docker build -t 'docker ID'/'nome do projeto':'vers\u00e3o' . (a vers\u00e3o ser\u00e1 quase sempre a mais recente - 'latest'; meu docker ID: beatrizafonso) Depois disso, para rodar a imagem basta: ~$ docker run 'docker ID'/'nome do projeto' Aula 38 Gerar uma imagem manualmente 1. ~$ docker run -it alpine sh /# apk add --update redis 2. abrir um segundo terminal: ~$ docker ps (para ver os cont\u00eainers que est\u00e3o rodando) ~$ docker commit -c 'CMD [\"redis-server\"]' 'container id' (o ID do cont\u00eainer ir\u00e1 estar impresso depois do 'docker ps') Depois disso ir\u00e1 aparece o id da imagem. ~$ docker run 'id da imagem' obs: ningu\u00e9m cria uma imagem manualmente, \u00e9 muito mais facil com um arquivo do docker 'dockerfile'","title":"M\u00f3dulo 3"},{"location":"Curso%20de%20Docker/docker-modulo-3/#modulo-3","text":"","title":"M\u00f3dulo 3"},{"location":"Curso%20de%20Docker/docker-modulo-3/#aula-30","text":"","title":"Aula 30"},{"location":"Curso%20de%20Docker/docker-modulo-3/#criando-imagens-no-docker","text":"1. criar um diret\u00f3rio: ~$ mkdir 'nome do diretorio' 2. mudar para o diret\u00f3rio criado ~$ cd 'nome do diret\u00f3rio' 3. iniciar o editor de c\u00f3digo dentro dessa pasta ~$ code . 4. criar uma pasta (Dockerfile) sem extens\u00e3o no seu editor de texto e come\u00e7ar a criar a imagem Dentro da pasta: 1. Usar uma imagem existente como base (utilizar uma imagem de acordo com as suas nessecidades, 'alpine' tem as configura\u00e7\u00f5es desejadas para o que queremos executar) FROM 'nome da imagem' (from alpine) 2. baixar e instalar uma dependencia (rodar um comando que existe dentro da imagem) RUN apk add --update redis 3. falar \u00e0 imagem o que fazer quando inicializar o cont\u00eainer CMD [\"redis-server\"] 4. salvar o arquivo e ir para o terminal ~$ docker build . ~$ docker run 'id criado' _obs: se precisar apagar a imagem que foi criada rodar ~$ docker system prune _","title":"Criando imagens no docker"},{"location":"Curso%20de%20Docker/docker-modulo-3/#aula-33","text":"usamos o build para obter um arquivo do docker e gerar uma imagem a partir dele; o . est\u00e1 especificando o que deve ser construido","title":"Aula 33"},{"location":"Curso%20de%20Docker/docker-modulo-3/#aula-35","text":"","title":"Aula 35"},{"location":"Curso%20de%20Docker/docker-modulo-3/#reconstruindo-a-imagem","text":"Ao reconstruir uma imagem (caso tenha colocado um comando adicional) tentar colocar sempre em ordem, para que n\u00e3o tenha que instalar tudo de novo.","title":"Reconstruindo a imagem"},{"location":"Curso%20de%20Docker/docker-modulo-3/#aula-36","text":"","title":"Aula 36"},{"location":"Curso%20de%20Docker/docker-modulo-3/#imagem-com-tag","text":"Para colocar uma tag em uma imagem e n\u00e3o precisar colocar o ID sempre que quiser rodar ela: ~$ Docker build -t 'docker ID'/'nome do projeto':'vers\u00e3o' . (a vers\u00e3o ser\u00e1 quase sempre a mais recente - 'latest'; meu docker ID: beatrizafonso) Depois disso, para rodar a imagem basta: ~$ docker run 'docker ID'/'nome do projeto'","title":"Imagem com tag"},{"location":"Curso%20de%20Docker/docker-modulo-3/#aula-38","text":"","title":"Aula 38"},{"location":"Curso%20de%20Docker/docker-modulo-3/#gerar-uma-imagem-manualmente","text":"1. ~$ docker run -it alpine sh /# apk add --update redis 2. abrir um segundo terminal: ~$ docker ps (para ver os cont\u00eainers que est\u00e3o rodando) ~$ docker commit -c 'CMD [\"redis-server\"]' 'container id' (o ID do cont\u00eainer ir\u00e1 estar impresso depois do 'docker ps') Depois disso ir\u00e1 aparece o id da imagem. ~$ docker run 'id da imagem' obs: ningu\u00e9m cria uma imagem manualmente, \u00e9 muito mais facil com um arquivo do docker 'dockerfile'","title":"Gerar uma imagem manualmente"},{"location":"Curso%20de%20Docker/docker-modulo-4/","text":"M\u00f3dulo 4 Aula 39 Passos para criar um projeto criar um app em node.js criar um 'dockerfile' construir a imagem dentro do 'dockerfile' executar a imagem como um cont\u00eainer conectar o app com o navegador Aula 41 - 44 ERRO - npm: not found H\u00e1 um erro comum na nova vers\u00e3o do Node, e pode aparecer a seguinnte mensagem quando construimos 'build' nossa 'dockerfile' npm: not found Para resolver esse problema: Encontrar uma nova imagem de base no site: https://hub.docker.com/search?q=&type=image Aula 45 [dockerfile] - COPY Depois de construir (docker build .) a 'dockerfile' corrigindo os erros acima, ir\u00e1 aparece um novo erro. Para resolv\u00ea-lo ir\u00e1 adicionar a seguinte instru\u00e7\u00e3o na 'dockerfile': COPY ./ ./ \u00c9 utilizada para mover arquivos e pastas do nosso sitema de arquivos local para o sistema de arquivos dentro do cont\u00eainer (criado temporariamente durante o processo de constru\u00e7\u00e3o da pasta) Depois disso, a imagem \u00e9 criada por\u00e9m n\u00e3o conseguimos acess\u00e1-la no navegador: http://localhost:8080/ Aula 47 Acessar a imagem pelo navegador ~$ docker run -p 8080:8080 'imageID' obs: '8080' foi especificado dentro da pasta com o c\u00f3digo O que significa 8080:808O? Encaminhar solicita\u00e7\u00f5es 8080 de entrada do host local para 8080 dentro do cont\u00eainer (as solicita\u00e7\u00f5es nem sempre s\u00e3o inguais) Aula 48 [Dockerfile] - WORKDIR N\u00e3o \u00e9 uma boa pr\u00e1tica copiar tudo que est\u00e1 no seu sistema de arquivos local para o sistema de arquivos do cont\u00eainer tempor\u00e1rio, j\u00e1 que alguma pasta pode conflitar. Para isso adicionar ap\u00f3s FROM: WORKDIR /usr/app Aula 49 - 50 Fa\u00e7a isso antes de reconstruir a imagem Quando fizer uma altera\u00e7\u00e3o no c\u00f3digo fonte do seu projeto, para n\u00e3o baixar todas as depend\u00eancias novamente no processo de contru\u00e7\u00e3o build : para isso especificar na etapa incial de COPY a \u00fanica coisa que quer copiar (arquivo n\u00e3o modificado) COPY ./package.json ./ RUN npm install COPY ./ ./","title":"M\u00f3dulo 4"},{"location":"Curso%20de%20Docker/docker-modulo-4/#modulo-4","text":"","title":"M\u00f3dulo 4"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-39","text":"","title":"Aula 39"},{"location":"Curso%20de%20Docker/docker-modulo-4/#passos-para-criar-um-projeto","text":"criar um app em node.js criar um 'dockerfile' construir a imagem dentro do 'dockerfile' executar a imagem como um cont\u00eainer conectar o app com o navegador","title":"Passos para criar um projeto"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-41-44","text":"","title":"Aula 41 - 44"},{"location":"Curso%20de%20Docker/docker-modulo-4/#erro-npm-not-found","text":"H\u00e1 um erro comum na nova vers\u00e3o do Node, e pode aparecer a seguinnte mensagem quando construimos 'build' nossa 'dockerfile' npm: not found Para resolver esse problema: Encontrar uma nova imagem de base no site: https://hub.docker.com/search?q=&type=image","title":"ERRO - npm: not found"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-45","text":"","title":"Aula 45"},{"location":"Curso%20de%20Docker/docker-modulo-4/#dockerfile-copy","text":"Depois de construir (docker build .) a 'dockerfile' corrigindo os erros acima, ir\u00e1 aparece um novo erro. Para resolv\u00ea-lo ir\u00e1 adicionar a seguinte instru\u00e7\u00e3o na 'dockerfile': COPY ./ ./ \u00c9 utilizada para mover arquivos e pastas do nosso sitema de arquivos local para o sistema de arquivos dentro do cont\u00eainer (criado temporariamente durante o processo de constru\u00e7\u00e3o da pasta) Depois disso, a imagem \u00e9 criada por\u00e9m n\u00e3o conseguimos acess\u00e1-la no navegador: http://localhost:8080/","title":"[dockerfile] - COPY"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-47","text":"","title":"Aula 47"},{"location":"Curso%20de%20Docker/docker-modulo-4/#acessar-a-imagem-pelo-navegador","text":"~$ docker run -p 8080:8080 'imageID' obs: '8080' foi especificado dentro da pasta com o c\u00f3digo O que significa 8080:808O? Encaminhar solicita\u00e7\u00f5es 8080 de entrada do host local para 8080 dentro do cont\u00eainer (as solicita\u00e7\u00f5es nem sempre s\u00e3o inguais)","title":"Acessar a imagem pelo navegador"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-48","text":"","title":"Aula 48"},{"location":"Curso%20de%20Docker/docker-modulo-4/#dockerfile-workdir","text":"N\u00e3o \u00e9 uma boa pr\u00e1tica copiar tudo que est\u00e1 no seu sistema de arquivos local para o sistema de arquivos do cont\u00eainer tempor\u00e1rio, j\u00e1 que alguma pasta pode conflitar. Para isso adicionar ap\u00f3s FROM: WORKDIR /usr/app","title":"[Dockerfile] - WORKDIR"},{"location":"Curso%20de%20Docker/docker-modulo-4/#aula-49-50","text":"","title":"Aula 49 - 50"},{"location":"Curso%20de%20Docker/docker-modulo-4/#faca-isso-antes-de-reconstruir-a-imagem","text":"Quando fizer uma altera\u00e7\u00e3o no c\u00f3digo fonte do seu projeto, para n\u00e3o baixar todas as depend\u00eancias novamente no processo de contru\u00e7\u00e3o build : para isso especificar na etapa incial de COPY a \u00fanica coisa que quer copiar (arquivo n\u00e3o modificado) COPY ./package.json ./ RUN npm install COPY ./ ./","title":"Fa\u00e7a isso antes de reconstruir a imagem"},{"location":"Curso%20de%20Docker/docker-modulo-5/","text":"M\u00f3dulo 5 Aula 53 APP: Quantidade de visitas no site Para imprimir a quantidade de visitas, foi feito o codigo em node.js e a 'dockerfile' ficou da seguinte maneira que j\u00e1 foi ensinado antes: FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . CMD [\"npm\",\"start\"] Depois vamos contruir a imagem com uma tag ~$ docker build -t beatriz/visits . Aula 54 Para o aplicativo rodar \u00e9 necess\u00e1rio registrar um segundo cont\u00eainer para executar o servidor (redis utilizado no exemplo) ~$ docker run redis vamos utilizar docker compose . funciona da mesma maneira que docker CLI, mas permite que vc emite v\u00e1rios comandos mais rapidamente. Aula 55 Docker-Compose Para utilizar o docker compose, vamos executar os mesmos comandos de antes, por\u00e9m vamos codufic\u00e1-los em um arquivo do diret\u00f3rio do projeto ( docker-compose.yml ). A pasta ficar\u00e1 da seguinte maneira: version: '3' services: redis-server: image: 'redis' node-app: build: . ports: - '4001:8081' Aula 56 Para conectar essa nova pasta ao c\u00f3digo fonte dever\u00e1 ser colocar dentro da pasta index.js (no local que est\u00e1 especificando o redis): { host: 'redis-server', port: 6379 } Aula 57 [Docker-compose] - Criando a imagem para criar nossa imagem: rodar docker compose ~$ docker-compose up se precisar reconstruir: docker-compose up --build ~$ docker run 'imagem' para reconstruir a imagem ~$ docker build . ~$ docker run 'imagem' Aula 58 Iniciar um grupo de cont\u00eainers em segundo plano ~$ docker-compose up -d Parar cont\u00eainers ~$ docker-compose down Aula 59 Para evitar que o cont\u00eainer trave, \u00e9 possivel adicionar os seguintes codigos dentro do codigo fonte da pasta index.js: Assim o servidor sair\u00e1 automaticamente sempre que algo de errado ocorrer. const process = require('process'); e process.exit(0); Aula 60 [Docker-compose] - Reiniciar o cont\u00eainer automaticamente Para o cont\u00eainer reiniciar automaticamente: version: '3' services: redis-server: image: 'redis' node-app: restart: on-failure build: . ports: - '4001:8081' Algumas mensagens para reiniciar - no : n\u00e3o reiniciar - always : sempre reiniciar - on-failure : apenas reinicia se o cont\u00eainer para com um c\u00f3digo de erro - unless-stopped : sempre reiniciar a n\u00e3o ser que algu\u00e9m o force a parar Aula 61 Status dos cont\u00eainers em execu\u00e7\u00e3o ~$ docker-compose ps","title":"M\u00f3dulo 5"},{"location":"Curso%20de%20Docker/docker-modulo-5/#modulo-5","text":"","title":"M\u00f3dulo 5"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-53","text":"","title":"Aula 53"},{"location":"Curso%20de%20Docker/docker-modulo-5/#app-quantidade-de-visitas-no-site","text":"Para imprimir a quantidade de visitas, foi feito o codigo em node.js e a 'dockerfile' ficou da seguinte maneira que j\u00e1 foi ensinado antes: FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . CMD [\"npm\",\"start\"] Depois vamos contruir a imagem com uma tag ~$ docker build -t beatriz/visits .","title":"APP: Quantidade de visitas no site"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-54","text":"Para o aplicativo rodar \u00e9 necess\u00e1rio registrar um segundo cont\u00eainer para executar o servidor (redis utilizado no exemplo) ~$ docker run redis vamos utilizar docker compose . funciona da mesma maneira que docker CLI, mas permite que vc emite v\u00e1rios comandos mais rapidamente.","title":"Aula 54"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-55","text":"","title":"Aula 55"},{"location":"Curso%20de%20Docker/docker-modulo-5/#docker-compose","text":"Para utilizar o docker compose, vamos executar os mesmos comandos de antes, por\u00e9m vamos codufic\u00e1-los em um arquivo do diret\u00f3rio do projeto ( docker-compose.yml ). A pasta ficar\u00e1 da seguinte maneira: version: '3' services: redis-server: image: 'redis' node-app: build: . ports: - '4001:8081'","title":"Docker-Compose"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-56","text":"Para conectar essa nova pasta ao c\u00f3digo fonte dever\u00e1 ser colocar dentro da pasta index.js (no local que est\u00e1 especificando o redis): { host: 'redis-server', port: 6379 }","title":"Aula 56"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-57","text":"","title":"Aula 57"},{"location":"Curso%20de%20Docker/docker-modulo-5/#docker-compose-criando-a-imagem","text":"para criar nossa imagem: rodar docker compose ~$ docker-compose up se precisar reconstruir: docker-compose up --build ~$ docker run 'imagem' para reconstruir a imagem ~$ docker build . ~$ docker run 'imagem'","title":"[Docker-compose] - Criando a imagem"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-58","text":"","title":"Aula 58"},{"location":"Curso%20de%20Docker/docker-modulo-5/#iniciar-um-grupo-de-conteiners-em-segundo-plano","text":"~$ docker-compose up -d","title":"Iniciar um grupo de cont\u00eainers em segundo plano"},{"location":"Curso%20de%20Docker/docker-modulo-5/#parar-conteiners","text":"~$ docker-compose down","title":"Parar cont\u00eainers"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-59","text":"Para evitar que o cont\u00eainer trave, \u00e9 possivel adicionar os seguintes codigos dentro do codigo fonte da pasta index.js: Assim o servidor sair\u00e1 automaticamente sempre que algo de errado ocorrer. const process = require('process'); e process.exit(0);","title":"Aula 59"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-60","text":"","title":"Aula 60"},{"location":"Curso%20de%20Docker/docker-modulo-5/#docker-compose-reiniciar-o-conteiner-automaticamente","text":"Para o cont\u00eainer reiniciar automaticamente: version: '3' services: redis-server: image: 'redis' node-app: restart: on-failure build: . ports: - '4001:8081' Algumas mensagens para reiniciar - no : n\u00e3o reiniciar - always : sempre reiniciar - on-failure : apenas reinicia se o cont\u00eainer para com um c\u00f3digo de erro - unless-stopped : sempre reiniciar a n\u00e3o ser que algu\u00e9m o force a parar","title":"[Docker-compose] - Reiniciar o cont\u00eainer automaticamente"},{"location":"Curso%20de%20Docker/docker-modulo-5/#aula-61","text":"","title":"Aula 61"},{"location":"Curso%20de%20Docker/docker-modulo-5/#status-dos-conteiners-em-execucao","text":"~$ docker-compose ps","title":"Status dos cont\u00eainers em execu\u00e7\u00e3o"},{"location":"Curso%20de%20Docker/docker-modulo-6/","text":"M\u00f3dulo 6 Aula 67 React project instalar a ferramenta para o 'react project' ~$ npm install -g create-react-app ~$ create-react-app 'nome do projeto' Aula 68 Interagindo com o projeto comandos para interagir com o projeto: ~$ npm run start ~$ npm run test ~$ npm run build Aula 70 [Dockerfile.dev] para especificar o arquivo que ser\u00e1 usado para criar a imagem: ~$ docker build -f Dockerfile.dev . Depois desse processo, j\u00e1 foi instalada todas as dependencia no diret\u00f3rio do projeto, ent\u00e3o para tornar o processo mais r\u00e1pido, podemos apagar a pasta 'node_modules'. Aula 71 Rodar o cont\u00eainer ~$ docker run -it -p 3000:3000 CONTAINER_ID Aula 73 - 75 Atualizando mudan\u00e7as no c\u00f3digo automaticamente ~$ docker run -it -p 3000:3000 -v /app/node_modules -v $(pwd):/app 'image ID' Comandos adicionais: -v$(pwd):/app : para obter o diret\u00f3rio de trabalho atual ou o caminho para ele, pegar tudo que est\u00e1 dentro da pasta e mapear para a pasta do aplicativo em execu\u00e7\u00e3o -v /app/node_modules : como apagamos a pasta 'node_modules' \u00e9 necess\u00e1rio colocar esse comando Aula 77 - 78 [Dockercompose.yml] Para facilitar o c\u00f3digo acima vamos usar dockercompose.yml version: '3' services: web: build: context: . dockerfile: Dockerfile.dev ports: - \"3000:3000\" volumes: - /app/node_modules - .:/app Assim, basta rodar: ~$ docker-compose up Aula 81 ~$ docker build -f Dockerfile.dev . ~$ docker run -it 'image ID' npm run test Aula 82 Manipualndo testes no cont\u00eainer em um terminal: ~$ docker-compose up em outro terminal: ~$ docker exec -it 'conteiner ID' npm run test Assim n\u00f3s podemos manipular os testes feitos no nosso cont\u00eainer Aula 83 Testes autom\u00e1ticos Uma segunda solu\u00e7\u00e3o, para n\u00e3o precisar realizar os testes manualmente: Criar um segundo servi\u00e7o para executar nossos testes dentro da 'dockercompose.yml' tests: build: context: . dockerfile: Dockerfile.dev volumes: - /app/node_modules - .:/app command: [\"npm\", \"run\", \"test\"] Para reconstruir: ~$ docker-compose up --build Aula 86 Comandos dentro do cont\u00eainer Para conseguirmos executar comandos dentro do cont\u00eainer iremos abrir em um segundo terminal o seguinte comando (para descobri o ID basta colocar docker ps): ~$ dokcer attach 'container ID' abrir um terceiro terminal: ~$ docker exec -it 'container ID' sh A partir da\u00ed voc\u00ea conseguir\u00e1 executar comando dentro desse cont\u00eainer em execu\u00e7\u00e3o. Aula 87 - 90 Para criar uma compila\u00e7\u00e3o de m\u00faltiplas etapas dentro da 'dockerfile' FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . RUN npm run build FROM nginx COPY --from=0 /app/build /usr/share/nginx/html Aula 91 executar NginX ~$ docker build . ~$ docker run -p 8080:80 'image ID' agora \u00e9 possivel acessar no navegador","title":"M\u00f3dulo 6"},{"location":"Curso%20de%20Docker/docker-modulo-6/#modulo-6","text":"","title":"M\u00f3dulo 6"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-67","text":"","title":"Aula 67"},{"location":"Curso%20de%20Docker/docker-modulo-6/#react-project","text":"instalar a ferramenta para o 'react project' ~$ npm install -g create-react-app ~$ create-react-app 'nome do projeto'","title":"React project"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-68","text":"","title":"Aula 68"},{"location":"Curso%20de%20Docker/docker-modulo-6/#interagindo-com-o-projeto","text":"comandos para interagir com o projeto: ~$ npm run start ~$ npm run test ~$ npm run build","title":"Interagindo com o projeto"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-70","text":"","title":"Aula 70"},{"location":"Curso%20de%20Docker/docker-modulo-6/#dockerfiledev","text":"para especificar o arquivo que ser\u00e1 usado para criar a imagem: ~$ docker build -f Dockerfile.dev . Depois desse processo, j\u00e1 foi instalada todas as dependencia no diret\u00f3rio do projeto, ent\u00e3o para tornar o processo mais r\u00e1pido, podemos apagar a pasta 'node_modules'.","title":"[Dockerfile.dev]"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-71","text":"","title":"Aula 71"},{"location":"Curso%20de%20Docker/docker-modulo-6/#rodar-o-conteiner","text":"~$ docker run -it -p 3000:3000 CONTAINER_ID","title":"Rodar o cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-73-75","text":"","title":"Aula 73 - 75"},{"location":"Curso%20de%20Docker/docker-modulo-6/#atualizando-mudancas-no-codigo-automaticamente","text":"~$ docker run -it -p 3000:3000 -v /app/node_modules -v $(pwd):/app 'image ID' Comandos adicionais: -v$(pwd):/app : para obter o diret\u00f3rio de trabalho atual ou o caminho para ele, pegar tudo que est\u00e1 dentro da pasta e mapear para a pasta do aplicativo em execu\u00e7\u00e3o -v /app/node_modules : como apagamos a pasta 'node_modules' \u00e9 necess\u00e1rio colocar esse comando","title":"Atualizando mudan\u00e7as no c\u00f3digo automaticamente"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-77-78","text":"","title":"Aula 77 - 78"},{"location":"Curso%20de%20Docker/docker-modulo-6/#dockercomposeyml","text":"Para facilitar o c\u00f3digo acima vamos usar dockercompose.yml version: '3' services: web: build: context: . dockerfile: Dockerfile.dev ports: - \"3000:3000\" volumes: - /app/node_modules - .:/app Assim, basta rodar: ~$ docker-compose up","title":"[Dockercompose.yml]"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-81","text":"~$ docker build -f Dockerfile.dev . ~$ docker run -it 'image ID' npm run test","title":"Aula 81"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-82","text":"","title":"Aula 82"},{"location":"Curso%20de%20Docker/docker-modulo-6/#manipualndo-testes-no-conteiner","text":"em um terminal: ~$ docker-compose up em outro terminal: ~$ docker exec -it 'conteiner ID' npm run test Assim n\u00f3s podemos manipular os testes feitos no nosso cont\u00eainer","title":"Manipualndo testes no cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-83","text":"","title":"Aula 83"},{"location":"Curso%20de%20Docker/docker-modulo-6/#testes-automaticos","text":"Uma segunda solu\u00e7\u00e3o, para n\u00e3o precisar realizar os testes manualmente: Criar um segundo servi\u00e7o para executar nossos testes dentro da 'dockercompose.yml' tests: build: context: . dockerfile: Dockerfile.dev volumes: - /app/node_modules - .:/app command: [\"npm\", \"run\", \"test\"] Para reconstruir: ~$ docker-compose up --build","title":"Testes autom\u00e1ticos"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-86","text":"","title":"Aula 86"},{"location":"Curso%20de%20Docker/docker-modulo-6/#comandos-dentro-do-conteiner","text":"Para conseguirmos executar comandos dentro do cont\u00eainer iremos abrir em um segundo terminal o seguinte comando (para descobri o ID basta colocar docker ps): ~$ dokcer attach 'container ID' abrir um terceiro terminal: ~$ docker exec -it 'container ID' sh A partir da\u00ed voc\u00ea conseguir\u00e1 executar comando dentro desse cont\u00eainer em execu\u00e7\u00e3o.","title":"Comandos dentro do cont\u00eainer"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-87-90","text":"Para criar uma compila\u00e7\u00e3o de m\u00faltiplas etapas dentro da 'dockerfile' FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . RUN npm run build FROM nginx COPY --from=0 /app/build /usr/share/nginx/html","title":"Aula 87 - 90"},{"location":"Curso%20de%20Docker/docker-modulo-6/#aula-91","text":"executar NginX ~$ docker build . ~$ docker run -p 8080:80 'image ID' agora \u00e9 possivel acessar no navegador","title":"Aula 91"},{"location":"Curso%20de%20Docker/docker-modulo-7/","text":"M\u00f3dulo 7 Ferramentas de armazenamento, teste e aplica\u00e7\u00e3o de c\u00f3digo: (Aula 92 - 98) Github (aula 93) - criando um reposit\u00f3rio e fazendo o push do c\u00f3digo para o github Travis CI (aula 94 - 98) 1. vincular com a conta do github, ativar o reposit\u00f3rio que vc quer trabalhar no Travis CI - Travis CI identifica quando vc faz um novo commit e realiza alguns trabalhos (ex: testes, implantar o projeto no AWS) 2. Criar uma pasta .travis.yml - Nesta pasta ter\u00e1 os comandos que o Travis ir\u00e1 executar: language: generic sudo: required services: - docker before_install: - docker build -t 'nome da tag' -f Dockerfile.dev . script: - docker run -e CI=true 'nome da tag' npm run test 3. fazer o push das mudan\u00e7as no github 4. abrir o travis CI e procurar o reposit\u00f3rio de teste, em 'job log' o teste (que foi escrito na pasta acima) ser\u00e1 feito. AWS (aula 99 - 101) criar conta no AWS aqui Em AWS services procurar: elastic beanstalk (este \u00e9 ideal quando executamos 1 cont\u00eainer por vez) criar uma nova aplica\u00e7\u00e3o Application name: docker > Platform: Docker > Platform branch: Docker running on 64bit Amazon Linux > create application assim que criada ser\u00e1 criada uma URL para essa aplica\u00e7\u00e3o. Aplica\u00e7\u00e3o automatica no AWS com Travis CI (aula 102 - 109) A aplica\u00e7\u00e3o \u00e9 feita depois de passar por todos os testes. Modifica\u00e7\u00f5es no .travis.yml : language: generic sudo: required services: - docker before_install: - docker build -t 'nome da tag' -f Dockerfile.dev . script: - docker run -e CI=true 'nome da tag' npm run test deploy: provider: 'AWSservice' region: \"'regi\u00e3o da aplica\u00e7\u00e3o'\" name: \"'nome do app'\" env: \"'nome do ambiente'\" bucket_name: \"'bucket_name'\" bucket_path: \"'bucket_path'\" on: branch: master Exemplo com URL: Docker-env.qbtbvwcxmh.us-west-2.elasticbeanstalk.com deploy: provider: elasticbeanstalk region: \"us-west-2\" name: \"docker\" env: \"Docker-env\" bucket_name: \"bucket_name\" bucket_path: \"docker\" on: branch: master access_key_id : $ AWS_ACCESS_KEY secret_access_key : $ AWS_SECRET_KEY Para encontrar o bucket_name : site AWS > services > search s3 > buscar o nome mais parecido > copiar Para encontrar o bucket_path : site AWS > services > search s3 > buscar o nome mais parecido > pasta com nome do projeto obs: pode acontecer da pasta n\u00e3o ser criada, nessa ocasi\u00e3o utilizar o nome do app Gerar chaves da API : (aula 105) site AWS > services > search IAM > users > add user Processo para adiciociar usu\u00e1rio: add user > colocar o nome > Programmatic Acess > Next:permissions > AttachExisting Polices Directly > Procurar por beanstalk > marcar caixa ao lado de AWSElasticBeanstalkFullAcess > Next:tags > Next:review > create user Depois que as chaves s\u00e3o geradas \u00e9 preciso escond\u00ea-las e n\u00e3o utiliza-las direto na pasta, para isso: Travis dashboard > more options > settings > enviroment variables Ap\u00f3s isso, fazer o push para o GitHub e observar o programa rodando no Travis CI Obs: se o 'AWS build' estiver falhando fazer o seguinte Para o Travis CI mapear a porta de entrada, adicionar o EXPOSE a Dockerfile : FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . RUN npm run build FROM nginx EXPOSE 80 COPY --from=0 /app/build /usr/share/nginx/html Trabalhando com uma equipe (Aula 108 - 111) 1. Criar um branch no GitHub para fazer o push das mudan\u00e7as no c\u00f3digo git checkout -b 'nome da branch' git add . git commit -m \"comentario\" git push origin 'nome da branch' 2. Ap\u00f3s o push entrar no reposit\u00f3rio do gitHub > 'Compare & pull request' > 'Create Pull Request' 3. Depois do c\u00f3digo passar pelas verifica\u00e7\u00f5es > 'Merge pull request' 4. Verificar o Travis CI e se AWS foi atualizado","title":"M\u00f3dulo 7"},{"location":"Curso%20de%20Docker/docker-modulo-7/#modulo-7","text":"","title":"M\u00f3dulo 7"},{"location":"Curso%20de%20Docker/docker-modulo-7/#ferramentas-de-armazenamento-teste-e-aplicacao-de-codigo","text":"(Aula 92 - 98)","title":"Ferramentas de armazenamento, teste e aplica\u00e7\u00e3o de c\u00f3digo:"},{"location":"Curso%20de%20Docker/docker-modulo-7/#github","text":"(aula 93) - criando um reposit\u00f3rio e fazendo o push do c\u00f3digo para o github","title":"Github"},{"location":"Curso%20de%20Docker/docker-modulo-7/#travis-ci","text":"(aula 94 - 98) 1. vincular com a conta do github, ativar o reposit\u00f3rio que vc quer trabalhar no Travis CI - Travis CI identifica quando vc faz um novo commit e realiza alguns trabalhos (ex: testes, implantar o projeto no AWS) 2. Criar uma pasta .travis.yml - Nesta pasta ter\u00e1 os comandos que o Travis ir\u00e1 executar: language: generic sudo: required services: - docker before_install: - docker build -t 'nome da tag' -f Dockerfile.dev . script: - docker run -e CI=true 'nome da tag' npm run test 3. fazer o push das mudan\u00e7as no github 4. abrir o travis CI e procurar o reposit\u00f3rio de teste, em 'job log' o teste (que foi escrito na pasta acima) ser\u00e1 feito.","title":"Travis CI"},{"location":"Curso%20de%20Docker/docker-modulo-7/#aws","text":"(aula 99 - 101) criar conta no AWS aqui Em AWS services procurar: elastic beanstalk (este \u00e9 ideal quando executamos 1 cont\u00eainer por vez) criar uma nova aplica\u00e7\u00e3o Application name: docker > Platform: Docker > Platform branch: Docker running on 64bit Amazon Linux > create application assim que criada ser\u00e1 criada uma URL para essa aplica\u00e7\u00e3o.","title":"AWS"},{"location":"Curso%20de%20Docker/docker-modulo-7/#aplicacao-automatica-no-aws-com-travis-ci","text":"(aula 102 - 109) A aplica\u00e7\u00e3o \u00e9 feita depois de passar por todos os testes. Modifica\u00e7\u00f5es no .travis.yml : language: generic sudo: required services: - docker before_install: - docker build -t 'nome da tag' -f Dockerfile.dev . script: - docker run -e CI=true 'nome da tag' npm run test deploy: provider: 'AWSservice' region: \"'regi\u00e3o da aplica\u00e7\u00e3o'\" name: \"'nome do app'\" env: \"'nome do ambiente'\" bucket_name: \"'bucket_name'\" bucket_path: \"'bucket_path'\" on: branch: master Exemplo com URL: Docker-env.qbtbvwcxmh.us-west-2.elasticbeanstalk.com deploy: provider: elasticbeanstalk region: \"us-west-2\" name: \"docker\" env: \"Docker-env\" bucket_name: \"bucket_name\" bucket_path: \"docker\" on: branch: master access_key_id : $ AWS_ACCESS_KEY secret_access_key : $ AWS_SECRET_KEY Para encontrar o bucket_name : site AWS > services > search s3 > buscar o nome mais parecido > copiar Para encontrar o bucket_path : site AWS > services > search s3 > buscar o nome mais parecido > pasta com nome do projeto obs: pode acontecer da pasta n\u00e3o ser criada, nessa ocasi\u00e3o utilizar o nome do app Gerar chaves da API : (aula 105) site AWS > services > search IAM > users > add user Processo para adiciociar usu\u00e1rio: add user > colocar o nome > Programmatic Acess > Next:permissions > AttachExisting Polices Directly > Procurar por beanstalk > marcar caixa ao lado de AWSElasticBeanstalkFullAcess > Next:tags > Next:review > create user Depois que as chaves s\u00e3o geradas \u00e9 preciso escond\u00ea-las e n\u00e3o utiliza-las direto na pasta, para isso: Travis dashboard > more options > settings > enviroment variables Ap\u00f3s isso, fazer o push para o GitHub e observar o programa rodando no Travis CI Obs: se o 'AWS build' estiver falhando fazer o seguinte Para o Travis CI mapear a porta de entrada, adicionar o EXPOSE a Dockerfile : FROM node:alpine WORKDIR '/app' COPY package.json . RUN npm install COPY . . RUN npm run build FROM nginx EXPOSE 80 COPY --from=0 /app/build /usr/share/nginx/html","title":"Aplica\u00e7\u00e3o automatica no AWS com Travis CI"},{"location":"Curso%20de%20Docker/docker-modulo-7/#trabalhando-com-uma-equipe","text":"(Aula 108 - 111) 1. Criar um branch no GitHub para fazer o push das mudan\u00e7as no c\u00f3digo git checkout -b 'nome da branch' git add . git commit -m \"comentario\" git push origin 'nome da branch' 2. Ap\u00f3s o push entrar no reposit\u00f3rio do gitHub > 'Compare & pull request' > 'Create Pull Request' 3. Depois do c\u00f3digo passar pelas verifica\u00e7\u00f5es > 'Merge pull request' 4. Verificar o Travis CI e se AWS foi atualizado","title":"Trabalhando com uma equipe"},{"location":"Curso%20de%20Docker/docker-modulo-8/","text":"M\u00f3dulo 8 Construindo um aplicativo com v\u00e1rios cont\u00eainers No m\u00f3dulo 8 foi montado um aplicativo em JavaScript para rodar em m\u00faltiplos cont\u00eainers. Como n\u00e3o \u00e9 o foco do curso, as anota\u00e7\u00f5es seguir\u00e3o no pr\u00f3ximo m\u00f3dulo.","title":"M\u00f3dulo 8"},{"location":"Curso%20de%20Docker/docker-modulo-8/#modulo-8","text":"","title":"M\u00f3dulo 8"},{"location":"Curso%20de%20Docker/docker-modulo-8/#construindo-um-aplicativo-com-varios-conteiners","text":"No m\u00f3dulo 8 foi montado um aplicativo em JavaScript para rodar em m\u00faltiplos cont\u00eainers. Como n\u00e3o \u00e9 o foco do curso, as anota\u00e7\u00f5es seguir\u00e3o no pr\u00f3ximo m\u00f3dulo.","title":"Construindo um aplicativo com v\u00e1rios cont\u00eainers"},{"location":"Curso%20de%20Docker/docker-modulo-9/","text":"M\u00f3dulo 9 Depois que todo o c\u00f3digo do aplicativo j\u00e1 foi constru\u00eddo, vamos colocar o aplicatico para rodar com o Docker!","title":"M\u00f3dulo 9"},{"location":"Curso%20de%20Docker/docker-modulo-9/#modulo-9","text":"Depois que todo o c\u00f3digo do aplicativo j\u00e1 foi constru\u00eddo, vamos colocar o aplicatico para rodar com o Docker!","title":"M\u00f3dulo 9"},{"location":"Curso%20de%20Linux/linux-introducao/","text":"Introdu\u00e7\u00e3o O Linux \u00e9 um Sistema Operacional de c\u00f3digo aberto, podendo utilizar o terminal para realizar diversas tarefas. Nos pr\u00f3ximos t\u00f3picos s\u00e3o aprensentadas algumas anota\u00e7\u00f5es feitas no decorrer do curso de Linux OBS : Os m\u00f3dulos 1 e 2 foram pulados uma vez que se tratam de uma breve introdu\u00e7\u00e3o e da instala\u00e7\u00e3o do Ubuntu, respectivamente.","title":"Introdu\u00e7\u00e3o"},{"location":"Curso%20de%20Linux/linux-introducao/#introducao","text":"O Linux \u00e9 um Sistema Operacional de c\u00f3digo aberto, podendo utilizar o terminal para realizar diversas tarefas. Nos pr\u00f3ximos t\u00f3picos s\u00e3o aprensentadas algumas anota\u00e7\u00f5es feitas no decorrer do curso de Linux OBS : Os m\u00f3dulos 1 e 2 foram pulados uma vez que se tratam de uma breve introdu\u00e7\u00e3o e da instala\u00e7\u00e3o do Ubuntu, respectivamente.","title":"Introdu\u00e7\u00e3o"},{"location":"Curso%20de%20Linux/linux-modulo-3/","text":"M\u00f3dulo 3 Aula 32 Abrir o terminal ctrl + alt + T Prompt travado Para recuperar: ctrl + C Aula 38 Para mostrar todos os diret\u00f3rios e arquivos que est\u00e3o come\u00e7ando com '/' : ~$ cd / ~$ ls -l Aula 39 Diret\u00f3rios importantes /boot : cont\u00e9m os arquivos usados para o gerenciador de inicializa\u00e7\u00e3o; /root : diret\u00f3rio inicial do usu\u00e1rio; /dev : cont\u00e9m os os dispositivos do sitema.. drives, disco etc /etc : cont\u00e9m toda a configura\u00e7\u00e3o dos arquivos/aplicativos... \u00e9 possivel modificar os arquivos (emails,etc) com /etc Aula 40 Quais os comandos para ir de um diret\u00f3rio a outra. 1. mudan\u00e7a de diret\u00f3rio: ~$ cd 2. 'print working diretory': informa qual diret\u00f3rio voc\u00ea esta atualmente ~$ pwd 3. Lista o conte\u00fado de um diret\u00f3rio ou arquivo ~$ ls -l cd .. : um diret\u00f3rio atr\u00e1s cd boot : encaminha para o diret\u00f3rio 'boot' cd / : voltar ao direorio principal Aula 41 Existem dois caminhos de navegar em um sistema de arquivos: 1. Absolute path: sempre come\u00e7a com '/' (cd/var/log/samba) 2. relative path: identifica um local em rela\u00e7\u00e3o a sua posi\u00e7\u00e3o atual (cd /var -> cd log -> cd samba) Aula 42 tipos de arquivo ~$ ls -l drwxr-xr-x 2 root root 4096 dez 31 10:56 bin tipo de arquivo - quantidade de links - propriet\u00e1rio - grupo - tamanho - m\u00eas - dia - hor\u00e1rio - nome primeira coluna - quando come\u00e7a com: - d : diret\u00f3rio - l : link - - : arquivo Aula 43 Criando arquivos ~$ touch 'arquivo' cria um arquivo vazio ~$ cp 'arquivo' 'diret\u00f3rio de destina\u00e7\u00e3o' copia um arquivo ja existente ~$ vi 'arquivo' cria um arquivo e abre um editor shift + Q + digitar wq! + enter : para sair do editor Criando diret\u00f3rios ~$ mkdir 'diret\u00f3rio' Aula 45 Comandos para encontrar arquivos e diret\u00f3rios ~$ find . -name \"'arquivo/diret\u00f3rio'\" ~$ find / -name \"'arquivo'\" quando n\u00e3o se sabe o diret\u00f3rio, esse comando procura em 'root'. (precisa da permiss\u00e3o do su) ~$ locate 'arquivo/diret\u00f3rio' obs: o locate \u00e9 mais r\u00e1pido que o find , por\u00e9m precisa atualizar sempre que criar um novo arquivo ou diret\u00f3rio: ~$ sudo updatedb Quando a permiss\u00e3o for negada: ~$ su - Aula 46 diferen\u00e7a entre find e locate : locate tem um banco de dados (e precisa ser atualizado regularmente), j\u00e1 find procura o arquivo dentro do sistema. Aula 47 Alterando a senha ~$ passwd 'userid' Aula 48 Curingas Um curinga \u00e9 um caractere que pode ser usado como substituto para qualquer classe de caracteres em uma pesquisa * : representa o zero ou mais caracteres ? : representa um \u00fanico caractere {} : representa um intervalo de caracteres ~$ touch diret\u00f3rio{1..9} ir\u00e1 criar 9 diret\u00f3rios (diret\u00f3rio1, diret\u00f3rio2... diret\u00f3rio9) ~$ ls -l diret\u00f3rio* ir\u00e1 imprimir todos os diret\u00f3rios que come\u00e7am com 'diret\u00f3rio' ~$ ls -l ?asta* ir\u00e1 imprimir todos os arquivos, independente do primeiro caractere, que tenha 'asta' e qualquer coisa depois ~$ ls -l * [cd] * imprime qualquer diret\u00f3rio que tenha 'cd' no meio Aula 49 Soft e Hard Link inode: ponto ou n\u00famero de um arquivo no 'hard disk' soft link: link que vai ser removido se um arquivo for removido ou renomeado hard link: deletando, renomeando ou movendo o arquivo original n\u00e3o vai afetar o 'hard link' criar um hard link: ~$ ln 'arquivo' criar um soft link: ~$ ln -s 'arquivo' escrever dentro de um arquivo: ~$ echo \"'qualquer coisa aqui'\" > 'arquivo' ~$ echo \"'coment\u00e1rio adicional'\" >> 'arquivo' imprimir o que est\u00e1 escrito: ~$ cat 'arquivo'","title":"M\u00f3dulo 3"},{"location":"Curso%20de%20Linux/linux-modulo-3/#modulo-3","text":"","title":"M\u00f3dulo 3"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-32","text":"","title":"Aula 32"},{"location":"Curso%20de%20Linux/linux-modulo-3/#abrir-o-terminal","text":"ctrl + alt + T","title":"Abrir o terminal"},{"location":"Curso%20de%20Linux/linux-modulo-3/#prompt-travado","text":"Para recuperar: ctrl + C","title":"Prompt travado"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-38","text":"Para mostrar todos os diret\u00f3rios e arquivos que est\u00e3o come\u00e7ando com '/' : ~$ cd / ~$ ls -l","title":"Aula 38"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-39","text":"","title":"Aula 39"},{"location":"Curso%20de%20Linux/linux-modulo-3/#diretorios-importantes","text":"/boot : cont\u00e9m os arquivos usados para o gerenciador de inicializa\u00e7\u00e3o; /root : diret\u00f3rio inicial do usu\u00e1rio; /dev : cont\u00e9m os os dispositivos do sitema.. drives, disco etc /etc : cont\u00e9m toda a configura\u00e7\u00e3o dos arquivos/aplicativos... \u00e9 possivel modificar os arquivos (emails,etc) com /etc","title":"Diret\u00f3rios importantes"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-40","text":"Quais os comandos para ir de um diret\u00f3rio a outra. 1. mudan\u00e7a de diret\u00f3rio: ~$ cd 2. 'print working diretory': informa qual diret\u00f3rio voc\u00ea esta atualmente ~$ pwd 3. Lista o conte\u00fado de um diret\u00f3rio ou arquivo ~$ ls -l cd .. : um diret\u00f3rio atr\u00e1s cd boot : encaminha para o diret\u00f3rio 'boot' cd / : voltar ao direorio principal","title":"Aula 40"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-41","text":"Existem dois caminhos de navegar em um sistema de arquivos: 1. Absolute path: sempre come\u00e7a com '/' (cd/var/log/samba) 2. relative path: identifica um local em rela\u00e7\u00e3o a sua posi\u00e7\u00e3o atual (cd /var -> cd log -> cd samba)","title":"Aula 41"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-42","text":"","title":"Aula 42"},{"location":"Curso%20de%20Linux/linux-modulo-3/#tipos-de-arquivo","text":"~$ ls -l drwxr-xr-x 2 root root 4096 dez 31 10:56 bin tipo de arquivo - quantidade de links - propriet\u00e1rio - grupo - tamanho - m\u00eas - dia - hor\u00e1rio - nome primeira coluna - quando come\u00e7a com: - d : diret\u00f3rio - l : link - - : arquivo","title":"tipos de arquivo"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-43","text":"","title":"Aula 43"},{"location":"Curso%20de%20Linux/linux-modulo-3/#criando-arquivos","text":"~$ touch 'arquivo' cria um arquivo vazio ~$ cp 'arquivo' 'diret\u00f3rio de destina\u00e7\u00e3o' copia um arquivo ja existente ~$ vi 'arquivo' cria um arquivo e abre um editor shift + Q + digitar wq! + enter : para sair do editor","title":"Criando arquivos"},{"location":"Curso%20de%20Linux/linux-modulo-3/#criando-diretorios","text":"~$ mkdir 'diret\u00f3rio'","title":"Criando diret\u00f3rios"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-45","text":"","title":"Aula 45"},{"location":"Curso%20de%20Linux/linux-modulo-3/#comandos-para-encontrar-arquivos-e-diretorios","text":"~$ find . -name \"'arquivo/diret\u00f3rio'\" ~$ find / -name \"'arquivo'\" quando n\u00e3o se sabe o diret\u00f3rio, esse comando procura em 'root'. (precisa da permiss\u00e3o do su) ~$ locate 'arquivo/diret\u00f3rio' obs: o locate \u00e9 mais r\u00e1pido que o find , por\u00e9m precisa atualizar sempre que criar um novo arquivo ou diret\u00f3rio: ~$ sudo updatedb Quando a permiss\u00e3o for negada: ~$ su -","title":"Comandos para encontrar arquivos e diret\u00f3rios"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-46","text":"diferen\u00e7a entre find e locate : locate tem um banco de dados (e precisa ser atualizado regularmente), j\u00e1 find procura o arquivo dentro do sistema.","title":"Aula 46"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-47","text":"","title":"Aula 47"},{"location":"Curso%20de%20Linux/linux-modulo-3/#alterando-a-senha","text":"~$ passwd 'userid'","title":"Alterando a senha"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-48","text":"","title":"Aula 48"},{"location":"Curso%20de%20Linux/linux-modulo-3/#curingas","text":"Um curinga \u00e9 um caractere que pode ser usado como substituto para qualquer classe de caracteres em uma pesquisa * : representa o zero ou mais caracteres ? : representa um \u00fanico caractere {} : representa um intervalo de caracteres ~$ touch diret\u00f3rio{1..9} ir\u00e1 criar 9 diret\u00f3rios (diret\u00f3rio1, diret\u00f3rio2... diret\u00f3rio9) ~$ ls -l diret\u00f3rio* ir\u00e1 imprimir todos os diret\u00f3rios que come\u00e7am com 'diret\u00f3rio' ~$ ls -l ?asta* ir\u00e1 imprimir todos os arquivos, independente do primeiro caractere, que tenha 'asta' e qualquer coisa depois ~$ ls -l * [cd] * imprime qualquer diret\u00f3rio que tenha 'cd' no meio","title":"Curingas"},{"location":"Curso%20de%20Linux/linux-modulo-3/#aula-49","text":"","title":"Aula 49"},{"location":"Curso%20de%20Linux/linux-modulo-3/#soft-e-hard-link","text":"inode: ponto ou n\u00famero de um arquivo no 'hard disk' soft link: link que vai ser removido se um arquivo for removido ou renomeado hard link: deletando, renomeando ou movendo o arquivo original n\u00e3o vai afetar o 'hard link' criar um hard link: ~$ ln 'arquivo' criar um soft link: ~$ ln -s 'arquivo' escrever dentro de um arquivo: ~$ echo \"'qualquer coisa aqui'\" > 'arquivo' ~$ echo \"'coment\u00e1rio adicional'\" >> 'arquivo' imprimir o que est\u00e1 escrito: ~$ cat 'arquivo'","title":"Soft e Hard Link"},{"location":"Curso%20de%20Linux/linux-modulo-4/","text":"M\u00f3dulo 4 Aula 53 Remover um diret\u00f3rio: ~$ rm -r 'diretorio'/ Para saber todas as op\u00e7\u00f5es que est\u00e3o dispon\u00edveis dentro de um comando: ~$ man 'comando' Aula 54 Permiss\u00f5es de arquivos e diret\u00f3rios Alterar as permiss\u00f5es de seus arquivos e diret\u00f3rios H\u00e1 3 tipos de permiss\u00e3o: 1. r - read 2. w - write 3. x - execute H\u00e1 3 n\u00edveis de controle das permiss\u00f5es: 1. u - user (vc) 2. g - group (pessoas do mesmo projeto) 3. o - other (todos no sistema) retirar permiss\u00e3o de um grupo para escrever (group - write) ~$ chmod g-w 'arquivo' retirar permiss\u00e3o de um grupo para ler (group - read) ~$ chmod g-r 'arquivo' retirar permiss\u00e3o do usu\u00e1rio para escrever (user - write) ~$ chmod u-w 'arquivo' adicionar permiss\u00e3o ao usu\u00e1rio para ler e escrever no arquivo (user + ler e escrever) ~$ chmod u+rw 'arquivo' caso queira adicionar permiss\u00e3o para o grupo ou outros basta troca u por g ou o Retirar a permiss\u00e3o de todos para entrar em um diret\u00f3rio: ~$ chmod a-x 'diret\u00f3rio' para dar a permiss\u00e3o de volta basta trocar - por + Aula 55 permiss\u00f5es de arquivos/diret\u00f3rios usando o m\u00e9todo num\u00e9rico ~$ chmod ugo+r 'arquivo' = ~$ chmod 444 'arquivo' significado dos n\u00fameros: 0 = sem permiss\u00e3o 1 = x 2 = w 3 = x+w 4 = r 5 = r+x 6 = r+w 7 = r+w+x ordem dos d\u00edgitos _ : primeiro d\u00edgito: usu\u00e1rio segundo d\u00edgito: grupo terceiro d\u00edgito: outros ~$ chmod 764 'arquivo' significado: usu\u00e1rio pode ler, escrever e executar; grupo pode ler e escreve; outros podem apenas ler Aula 56 Propriet\u00e1rio de um arquivo comandos para mudar o propriet\u00e1rio de um arquivo: chown : muda o propriet\u00e1rio chgrp : muda o grupo propriet\u00e1rio mudar o propriet\u00e1rio: ~$ chown 'novo propriet\u00e1rio' 'arquivo' mudar o grupo: ~$ chgrp 'novo grupo' 'arquivo' obs: antes de mudar o propriet\u00e1rio/grupo \u00e9 necess\u00e1rio obter autoriza\u00e7\u00e3o do su, colocando o comando su - e rodando antes, ou colocando sudo antes do comando Aula 57 Lista de controle de acessos \u00c9 poss\u00edvel dar permiss\u00e3o a um usu\u00e1rio particular para ler um arquivo, sem precisar permitir para todos os outros. Comandos: setfacl : define a maneira que vc quer que seja a permiss\u00e3o getfacl : da a informa\u00e7\u00e3o sobre as permiss\u00f5es existente em um arquivo Para ver quem tem permiss\u00e3o: ~$ getfacl 'arquivo' Adicionar permiss\u00e3o ao usu\u00e1rio: ~$ setfacl -m u:'user':rwx /caminho/para/arquivo -m : para modificar a permiss\u00e3o Adicionar permiss\u00e3o ao grupo ~$ setfacl -m g:'grupo':rw /caminho/para/arquivo Para permitir que todos os arquivos/diret\u00f3rios herdem entradas do ACL do diret\u00f3rio em que est\u00e3o ~$ setfacl -rm \"entry\" /caminho/para/diret\u00f3rio Para remover uma entrada espec\u00edfica para um usu\u00e1rio espec\u00edfico ~$ setfacl -x u:'user' /caminho/para/arquivo remover todas as permiss\u00f5es a todos ~$ setfacl -b /caminho/para/arquivo Aula 58 Comandos de ajuda ~$ whatis 'comando' informa\u00e7\u00f5es sobre o comando ~$ 'comando' --help mais detalhes sobre o comando ~$ man 'comando' manual do comando, imprime uma lista de comandos que podem ser utilizados Aula 59","title":"M\u00f3dulo 4"},{"location":"Curso%20de%20Linux/linux-modulo-4/#modulo-4","text":"","title":"M\u00f3dulo 4"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-53","text":"","title":"Aula 53"},{"location":"Curso%20de%20Linux/linux-modulo-4/#remover-um-diretorio","text":"~$ rm -r 'diretorio'/ Para saber todas as op\u00e7\u00f5es que est\u00e3o dispon\u00edveis dentro de um comando: ~$ man 'comando'","title":"Remover um diret\u00f3rio:"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-54","text":"","title":"Aula 54"},{"location":"Curso%20de%20Linux/linux-modulo-4/#permissoes-de-arquivos-e-diretorios","text":"Alterar as permiss\u00f5es de seus arquivos e diret\u00f3rios H\u00e1 3 tipos de permiss\u00e3o: 1. r - read 2. w - write 3. x - execute H\u00e1 3 n\u00edveis de controle das permiss\u00f5es: 1. u - user (vc) 2. g - group (pessoas do mesmo projeto) 3. o - other (todos no sistema) retirar permiss\u00e3o de um grupo para escrever (group - write) ~$ chmod g-w 'arquivo' retirar permiss\u00e3o de um grupo para ler (group - read) ~$ chmod g-r 'arquivo' retirar permiss\u00e3o do usu\u00e1rio para escrever (user - write) ~$ chmod u-w 'arquivo' adicionar permiss\u00e3o ao usu\u00e1rio para ler e escrever no arquivo (user + ler e escrever) ~$ chmod u+rw 'arquivo' caso queira adicionar permiss\u00e3o para o grupo ou outros basta troca u por g ou o Retirar a permiss\u00e3o de todos para entrar em um diret\u00f3rio: ~$ chmod a-x 'diret\u00f3rio' para dar a permiss\u00e3o de volta basta trocar - por +","title":"Permiss\u00f5es de arquivos e diret\u00f3rios"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-55","text":"permiss\u00f5es de arquivos/diret\u00f3rios usando o m\u00e9todo num\u00e9rico ~$ chmod ugo+r 'arquivo' = ~$ chmod 444 'arquivo' significado dos n\u00fameros: 0 = sem permiss\u00e3o 1 = x 2 = w 3 = x+w 4 = r 5 = r+x 6 = r+w 7 = r+w+x ordem dos d\u00edgitos _ : primeiro d\u00edgito: usu\u00e1rio segundo d\u00edgito: grupo terceiro d\u00edgito: outros ~$ chmod 764 'arquivo' significado: usu\u00e1rio pode ler, escrever e executar; grupo pode ler e escreve; outros podem apenas ler","title":"Aula 55"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-56","text":"","title":"Aula 56"},{"location":"Curso%20de%20Linux/linux-modulo-4/#proprietario-de-um-arquivo","text":"comandos para mudar o propriet\u00e1rio de um arquivo: chown : muda o propriet\u00e1rio chgrp : muda o grupo propriet\u00e1rio mudar o propriet\u00e1rio: ~$ chown 'novo propriet\u00e1rio' 'arquivo' mudar o grupo: ~$ chgrp 'novo grupo' 'arquivo' obs: antes de mudar o propriet\u00e1rio/grupo \u00e9 necess\u00e1rio obter autoriza\u00e7\u00e3o do su, colocando o comando su - e rodando antes, ou colocando sudo antes do comando","title":"Propriet\u00e1rio de um arquivo"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-57","text":"","title":"Aula 57"},{"location":"Curso%20de%20Linux/linux-modulo-4/#lista-de-controle-de-acessos","text":"\u00c9 poss\u00edvel dar permiss\u00e3o a um usu\u00e1rio particular para ler um arquivo, sem precisar permitir para todos os outros. Comandos: setfacl : define a maneira que vc quer que seja a permiss\u00e3o getfacl : da a informa\u00e7\u00e3o sobre as permiss\u00f5es existente em um arquivo Para ver quem tem permiss\u00e3o: ~$ getfacl 'arquivo' Adicionar permiss\u00e3o ao usu\u00e1rio: ~$ setfacl -m u:'user':rwx /caminho/para/arquivo -m : para modificar a permiss\u00e3o Adicionar permiss\u00e3o ao grupo ~$ setfacl -m g:'grupo':rw /caminho/para/arquivo Para permitir que todos os arquivos/diret\u00f3rios herdem entradas do ACL do diret\u00f3rio em que est\u00e3o ~$ setfacl -rm \"entry\" /caminho/para/diret\u00f3rio Para remover uma entrada espec\u00edfica para um usu\u00e1rio espec\u00edfico ~$ setfacl -x u:'user' /caminho/para/arquivo remover todas as permiss\u00f5es a todos ~$ setfacl -b /caminho/para/arquivo","title":"Lista de controle de acessos"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-58","text":"","title":"Aula 58"},{"location":"Curso%20de%20Linux/linux-modulo-4/#comandos-de-ajuda","text":"~$ whatis 'comando' informa\u00e7\u00f5es sobre o comando ~$ 'comando' --help mais detalhes sobre o comando ~$ man 'comando' manual do comando, imprime uma lista de comandos que podem ser utilizados","title":"Comandos de ajuda"},{"location":"Curso%20de%20Linux/linux-modulo-4/#aula-59","text":"","title":"Aula 59"}]}